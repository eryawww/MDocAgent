[
  "arXiv:1804.08050v2  [cs.CL]  28 Jul 2018 Multi-Head Decoder for End-to-End Speech Recognition Tomoki Hayashi1, Shinji Watanabe2, Tomoki Toda1, Kazuya Takeda1 1Nagoya University, 2Johns Hopkins University hayashi.tomoki@g.sp.m.is.nagoya-u.ac.jp, shinjiw@jhu.edu, tomoki@icts.nagoya-u.ac.jp, kazuya.takeda@nagoya-u.ac.jp Abstract This paper presents a new network architecture called multi- head decoder for end-to-end speech recognition as an extension of a multi-head attention model. In the multi-head attention model, multiple attentions are calculated, and then, they are in- tegrated into a single attention. On the other hand, instead of the integration in the attention level, our proposed method uses multiple decoders for each attention and integrates their out- puts to generate a \ufb01nal output.",
  "On the other hand, instead of the integration in the attention level, our proposed method uses multiple decoders for each attention and integrates their out- puts to generate a \ufb01nal output. Furthermore, in order to make each head to capture the different modalities, different atten- tion functions are used for each head, leading to the improve- ment of the recognition performance with an ensemble effect. To evaluate the effectiveness of our proposed method, we con- duct an experimental evaluation using Corpus of Spontaneous Japanese. Experimental results demonstrate that our proposed method outperforms the conventional methods such as location- based and multi-head attention models, and that it can capture different speech/linguistic contexts within the attention-based encoder-decoder framework. Index Terms: speech recognition, end-to-end, attention, dy- namical neural network 1. Introduction Automatic speech recognition (ASR) is the task to convert a continuous speech signal into a sequence of discrete characters, and it is a key technology to realize the interaction between hu- man and machine. ASR has a great potential for various appli- cations such as voice search and voice input, making our lives more rich.",
  "ASR has a great potential for various appli- cations such as voice search and voice input, making our lives more rich. Typical ASR systems [1] consist of many modules such as an acoustic model, a lexicon model, and a language model. Factorizing the ASR system into these modules makes it possible to deal with each module as a separate problem. Over the past decades, this factorization has been the basis of the ASR system, however, it makes the system much more complex. With the improvement of deep learning techniques, end-to- end approaches have been proposed [2]. In the end-to-end ap- proach, a continuous acoustic signal or a sequence of acoustic features is directly converted into a sequence of characters with a single neural network. Therefore, the end-to-end approach does not require the factorization into several modules, as de- scribed above, making it easy to optimize the whole system. Furthermore, it does not require lexicon information, which is handcrafted by human experts in general. The end-to-end approach is classi\ufb01ed into two types.",
  "Furthermore, it does not require lexicon information, which is handcrafted by human experts in general. The end-to-end approach is classi\ufb01ed into two types. One approach is based on connectionist temporal classi\ufb01cation (CTC) [2\u20134], which makes it possible to handle the difference in the length of input and output sequences with dynamic pro- gramming. The CTC-based approach can ef\ufb01ciently solve the sequential problem, however, CTC uses Markov assumptions to perform dynamic programming and predicts output symbols such as characters or phonemes for each frame independently. Consequently, except in the case of huge training data [5, 6], it requires the language model and graph-based decoding [7]. The other approach utilizes attention-based method [8]. In this approach, encoder-decoder architecture [9, 10] is used to perform a direct mapping from a sequence of input features into text. The encoder network converts the sequence of input fea- tures to that of discriminative hidden states, and the decoder network uses attention mechanism to get an alignment between each element of the output sequence and the encoder hidden states.",
  "The encoder network converts the sequence of input fea- tures to that of discriminative hidden states, and the decoder network uses attention mechanism to get an alignment between each element of the output sequence and the encoder hidden states. And then it estimates the output symbol using weighted averaged hidden states, which is based on the alignment, as the inputs of the decoder network. Compared with the CTC-based approach, the attention-based method does not require any con- ditional independence assumptions including the Markov as- sumption, language models, and complex decoding. However, non-causal alignment problem is caused by a too \ufb02exible align- ment of the attention mechanism [11]. To address this issue, the study [11] combines the objective function of the attention- based model with that of CTC to constrain \ufb02exible alignments of the attention. Another study [12] uses a multi-head atten- tion (MHA) to get more suitable alignments. In MHA, multiple attentions are calculated, and then, they are integrated into a sin- gle attention.",
  "Another study [12] uses a multi-head atten- tion (MHA) to get more suitable alignments. In MHA, multiple attentions are calculated, and then, they are integrated into a sin- gle attention. Using MHA enables the model to jointly focus on information from different representation subspaces at different positions [13], leading to the improvement of the recognition performance. Inspired by the idea of MHA, in this study we present a new network architecture called multi-head decoder for end-to- end speech recognition as an extension of a multi-head attention model. Instead of the integration in the attention level, our pro- posed method uses multiple decoders for each attention and in- tegrates their outputs to generate a \ufb01nal output. Furthermore, in order to make each head to capture the different modalities, dif- ferent attention functions are used for each head, leading to the improvement of the recognition performance with an ensemble effect. To evaluate the effectiveness of our proposed method, we conduct an experimental evaluation using Corpus of Spon- taneous Japanese.",
  "To evaluate the effectiveness of our proposed method, we conduct an experimental evaluation using Corpus of Spon- taneous Japanese. Experimental results demonstrate that our proposed method outperforms the conventional methods such as location-based and multi-head attention models, and that it can capture different speech/linguistic contexts within the attention- based encoder-decoder framework. 2. Attention-Based End-to-End ASR The overview of attention-based network architecture is shown in Fig. 1. The attention-based method directly estimates a pos- terior p(C|X), where X = {x1, x2, . . . , xT } represents a se- quence of input features, C = {c1, c2, . . . , cL} represents a sequence of output characters. The posterior p(C|X) is factor-",
  "Figure 1: Overview of attention-based network architecture. ized with a probabilistic chain rule as follows: p(C|X) = L Y l=1 p(cl|c1:l\u22121, X), (1) where c1:l\u22121 represents a subsequence {c1, c2, . . . cl\u22121}, and p(cl|c1:l\u22121, X) is calculated as follows: ht = Encoder(X), (2) alt = \uf8f1 \uf8f4 \uf8f4 \uf8f4 \uf8f2 \uf8f4 \uf8f4 \uf8f4 \uf8f3 DotProductAttention(ql\u22121, ht), AdditiveAttention(ql\u22121, ht), LocationAttention(ql\u22121, ht, al\u22121), CoverageAttention(ql\u22121, ht, a1:l\u22121), (3) rl = T X t=1 altht, (4) p(cl|c1:l\u22121, X) = Decoder(rl, ql\u22121, cl\u22121), (5) where Eq. (2) and Eq.",
  "(2) and Eq. (5) represent encoder and decoder net- works, respectively, alt represents an attention weight, al rep- resents an attention weight vector, which is a sequence of at- tention weights {al0, al1, . . . , alT }, a1:l\u22121 represents a subse- quence of attention vectors {a1, a2, . . . , al\u22121}, ht and ql rep- resent hidden states of encoder and decoder networks, respec- tively, and rl represents the letter-wise hidden vector, which is a weighted summarization of hidden vectors with the attention weight vector al. The encoder network in Eq. (2) converts a sequence of in- put features X into frame-wise discriminative hidden states ht, and it is typically modeled by a bidirectional long short-term memory recurrent neural network (BLSTM): Encoder(X) = BLSTM(X). (6) In the case of ASR, the length of the input sequence is signi\ufb01- cantly different from the length of the output sequence. Hence, basically outputs of BLSTM are often subsampled to reduce the computational cost [8,14].",
  "(6) In the case of ASR, the length of the input sequence is signi\ufb01- cantly different from the length of the output sequence. Hence, basically outputs of BLSTM are often subsampled to reduce the computational cost [8,14]. The attention weight alt in Eq. (3) represents a soft align- ment between each element of the output sequence cl and the encoder hidden states ht. \u2022 DotProductAttention(\u00b7) in Eq. (3), which is the most sim- plest attention [15], is calculated as follows: elt = qT l\u22121Waht, (7) al = Softmax(el), (8) where Wa represents trainable matrix parameters, and el represent a sequence of energies {el1, el2, . . . , elT } \u2022 AdditiveAttention(\u00b7) in Eq. (3) is additive attention [16], and the calculation of the energy in Eq. (7) is replaced with following equation: elt = gT tanh(Wqql\u22121 + Whht + b), (9) where W\u2217represents trainable matrix parameters, g and b represent trainable vector parameters.",
  "(7) is replaced with following equation: elt = gT tanh(Wqql\u22121 + Whht + b), (9) where W\u2217represents trainable matrix parameters, g and b represent trainable vector parameters. \u2022 LocationAttention(\u00b7) in Eq. (3) is location-based atten- tion [8], and the calculation of the energy in Eq. (7) is re- placed with following equations: Fl = K \u2217al\u22121, (10) elt = gT tanh(Wqql\u22121+Whht+Wfflt+b), (11) where Fl consists of the vectors {fl1, f l2, . . . , flT }, and K represents trainable one-dimensional convolution \ufb01lters. \u2022 CoverageAttention(\u00b7) in Eq. (3) is coverage mecha- nism [17], and the calculation of the energy in Eq. (7) is replaced with following equations: vl = l\u22121 X l\u2032=1 al\u2032, (12) elt = gT tanh(Wqql\u22121 +Whht +wvvlt +b), (13) where w represents trainable vector parameters.",
  "(7) is replaced with following equations: vl = l\u22121 X l\u2032=1 al\u2032, (12) elt = gT tanh(Wqql\u22121 +Whht +wvvlt +b), (13) where w represents trainable vector parameters. The decoder network in Eq. (5) estimates the next character cl from the previous character cl\u22121, hidden state vector of itself ql\u22121 and the letter-wise hidden state vector rl, similar to RNN language model (RNNLM) [18]. It is typically modeled using LSTM as follows: ql = LSTM(cl\u22121, ql\u22121, rl), (14) Decoder(\u00b7) = Softmax(Wql + b), (15) where W and b represent trainable matrix and vector parame- ters, respectively. Finally, the whole of above networks are optimized using back-propagation through time (BPTT) [19] to minimize the following objective function: L = \u2212log p(C|X) = \u2212log  L X l=1 p(cl|c\u2217 1:l\u22121, X) !",
  "Finally, the whole of above networks are optimized using back-propagation through time (BPTT) [19] to minimize the following objective function: L = \u2212log p(C|X) = \u2212log  L X l=1 p(cl|c\u2217 1:l\u22121, X) ! , (16) where c\u2217 1:l\u22121 = {c\u2217 1, c\u2217 2, . . . , c\u2217 l\u22121} represents the ground truth of the previous characters. 3. Multi-Head Decoder The overview of our proposed multi-head decoder (MHD) ar- chitecture is shown in Fig. 2. In MHD architecture, multiple attentions are calculated with the same manner in the conven- tional multi-head attention (MHA) [13]. We \ufb01rst describe the conventional MHA, and extend it to our proposed multi-head decoder (MHD).",
  "Figure 2: Overview of multi-head decoder architecture. 3.1. Multi-head attention (MHA) The layer-wise hidden vector at the head n is calculated as fol- lows: a(n) lt = Attention(W(n) Q ql\u22121, W(n) K ht, . . . ), (17) r(n) l = T X t=1 a(n) lt W(n) V ht, (18) where W(n) Q , W(n) K , and W(n) V represent trainable matrix pa- rameters, and any types of attention in Eq. (3) can be used for Attention(\u00b7) in Eq. (17). In the case of MHA, the layer-wise hidden vectors of each head are integrated into a single vector with a trainable linear transformation: rl = WO h r(1) l \u22a4, r(2) l \u22a4, . . . , r(N) l \u22a4i\u22a4 , (19) where WO is a trainable matrix parameter, N represents the number of heads. 3.2.",
  ". . , r(N) l \u22a4i\u22a4 , (19) where WO is a trainable matrix parameter, N represents the number of heads. 3.2. Multi-head decoder (MHD) On the other hand, in the case of MHD, instead of the integra- tion at attention level, we assign multiple decoders for each head and then integrate their outputs to get a \ufb01nal output. Since each attention decoder captures different modalities, it is expected to improve the recognition performance with an ensemble effect. The calculation of the attention weight at the head n in Eq. (17) is replaced with following equation: a(n) lt = Attention(W(n) Q q(n) l\u22121, W(n) K ht, . . . ). (20) Instead of the integration of the letter-wise hidden vectors {r(1) l , r(2) l , . . . , r(N) l } with linear transformation, each letter- wise hidden vector r(n) l is fed to n-th decoder LSTM: q(n) l = LSTM(n)(cl\u22121, q(n) l\u22121, r(n) l ).",
  ". . , r(N) l } with linear transformation, each letter- wise hidden vector r(n) l is fed to n-th decoder LSTM: q(n) l = LSTM(n)(cl\u22121, q(n) l\u22121, r(n) l ). (21) Note that each LSTM has its own hidden state q(n) l which is used for the calculation of the attention weight a(n) lt , while the input character cl is the same among all of the LSTMs. Finally, all of the outputs are integrated as follows: p(cl|c1:l\u22121, X) = Softmax  N X n=1 W(n)q(n) l + b ! , (22) where W(n) represents a trainable matrix parameter, and b rep- resents a trainable vector parameter. 3.3. Heterogeneous multi-head decoder (HMHD) As a further extension, we propose heterogeneous multi-head decoder (HMHD). Original MHA methods [12,13] use the same attention function such as dot-product or additive attention for each head. On the other hand, HMHD uses different atten- tion functions for each head.",
  "Original MHA methods [12,13] use the same attention function such as dot-product or additive attention for each head. On the other hand, HMHD uses different atten- tion functions for each head. We expect that this extension en- ables to capture the further different context in speech within the attention-based encoder-decoder framework. 4. Experimental Evaluation To evaluate the performance of our proposed method, we con- ducted experimental evaluation using Corpus of Spontaneous Japanese (CSJ) [21], including 581 hours of training data, and three types of evaluation data. To compare the performance, we used following dot, additive, location, and three variants of multi-head attention methods: \u2022 Dot-product attention-based model (Dot), \u2022 Additive attention-based model (Add), \u2022 Location-aware attention-based model (Loc), \u2022 Multi-head dot-product attention model (MHA-Dot), \u2022 Multi-head additive attention model (MHA-Add), \u2022 Multi-head location attention model (MHA-Loc). We used the input feature vector consisting of 80 dimen- sional log Mel \ufb01lter bank and three dimensional pitch feature, which is extracted using open-source speech recognition toolkit Kaldi [22].",
  "We used the input feature vector consisting of 80 dimen- sional log Mel \ufb01lter bank and three dimensional pitch feature, which is extracted using open-source speech recognition toolkit Kaldi [22]. Encoder and decoder networks were six-layered BLSTM with projection layer [23] (BLSTMP) and one-layered LSTM, respectively. In the second and third bottom layers in the encoder, subsampling was performed to reduce the length of utterance, yielding the length T/4. For MHA/MHD, we set the number of heads to four. For HMHD, we used two kind of settings: (1) dot-product attention + additive atten- tion + location-based attention + coverage mechanism atten- tion (Dot+Add+Loc+Cov), and (2) two location-based atten- tions + two coverage mechanism attentions (2\u00d7Loc+2\u00d7Cov). The number of distinct output characters was 3,315 includ- ing Kanji, Hiragana, Katakana, alphabets, Arabic number and sos/eos symbols. In decoding, we used beam search algo- rithm [10] with beam size 20.",
  "The number of distinct output characters was 3,315 includ- ing Kanji, Hiragana, Katakana, alphabets, Arabic number and sos/eos symbols. In decoding, we used beam search algo- rithm [10] with beam size 20. We manually set maximum and minimum lengths of the output sequence to 0.1 and 0.5 times the length of the subsampled input sequence, respectively, and the length penalty to 0.1 times the length of the output sequence.",
  "Table 1: Experimental conditions. # training 445,068 utterances (581 hours) # evaluation (task 1) 1,288 utterances (1.9 hours) # evaluation (task 2) 1,305 utterances (2.0 hours) # evaluation (task 3) 1,389 utterances (1.3 hours) Sampling rate 16,000 Hz Window size 25 ms Shift size 10 ms Encoder type BLSTMP # encoder layers 6 # encoder units 320 # projection units 320 Decoder type LSTM # decoder layers 1 # decoder units 320 # heads in MHA 4 # \ufb01lter in location att. 10 Filter size in location att.",
  "10 Filter size in location att. 100 Learning rate 1.0 Initialization Uniform [\u22120.1, 0.1] Gradient clipping norm 5 Batch size 30 Maximum epoch 15 Optimization method AdaDelta [20] AdaDelta \u03c1 0.95 AdaDelta \u01eb 10\u22128 AdaDelta \u01eb decay rate 10\u22122 Beam size 20 Maximum length 0.5 Minimum length 0.1 All of the networks were trained using end-to-end speech pro- cessing toolkit ESPnet [24] with a single GPU (Titan X pascal). Character error rate (CER) was used as a metric. The detail of experimental condition is shown in Table 1. Experimental results are shown in Table 2. First, we fo- cus on the results of the conventional methods. Basically, it is known that location-based attention yields better performance than additive attention [11]. However, in the case of Japanese sentence, its length is much shorter than that of English sen- tence, which makes the use of location-based attention less ef- fective. In most of the cases, the use of MHA brings the im- provement of the recognition performance.",
  "However, in the case of Japanese sentence, its length is much shorter than that of English sen- tence, which makes the use of location-based attention less ef- fective. In most of the cases, the use of MHA brings the im- provement of the recognition performance. Next, we focus on the effectiveness of our proposed MHD architecture. By com- paring with the MHA-Loc, MHD-Loc (proposed method) im- proved the performance in Tasks 1 and 2, while we observed the degradation in Task 3. However, the heterogeneous exten- sion (HMHD), as introduced in Section 3.3, brings the further improvement for the performance of MHD, achieving the best performance among all of the methods for all test sets. Finally, Figure 3 shows the alignment information of each head of HMHD (2\u00d7Loc+2\u00d7Cov), which was obtained by vi- sualizing the attention weights. Interestingly, the alignments of the right and left ends seem to capture more abstracted dy- namics of speech, while the rest of two alignments behave like normal alignments obtained by a standard attention mechanism.",
  "Interestingly, the alignments of the right and left ends seem to capture more abstracted dy- namics of speech, while the rest of two alignments behave like normal alignments obtained by a standard attention mechanism. Thus, we can see that the attention weights of each head have a Table 2: Experimental results. CER [%] Task 1 Task 2 Task 3 Dot 12.7 9.8 10.7 Add 11.1 8.4 9.0 Loc 11.7 8.8 10.2 MHA-Dot 11.6 8.5 9.3 MHA-Add 10.7 8.2 9.1 MHA-Loc 11.5 8.6 9.0 MHD-Loc 11.0 8.4 9.5 HMHD (Dot+Add+Loc+Cov) 11.0 8.3 9.0 HMHD (2\u00d7Loc+2\u00d7Cov) 10.4 7.7 8.9 Figure 3: Attention weights of each head.",
  "Two left \ufb01gures rep- resent the attention weights of the location-based attention, and the remaining \ufb01gures represent that of the coverage mechanism attention. different tendency, and it supports our hypothesis that HMHD can capture different speech/linguistic contexts within its frame- work. 5. Conclusions In this paper, we proposed a new network architecture called multi-head decoder for end-to-end speech recognition as an ex- tension of a multi-head attention model. Instead of the in- tegration in the attention level, our proposed method utilized multiple decoders for each attention and integrated their out- puts to generate a \ufb01nal output. Furthermore, in order to make each head to capture the different modalities, we used differ- ent attention functions for each head. To evaluate the effec- tiveness of our proposed method, we conducted an experimen- tal evaluation using Corpus of Spontaneous Japanese. Experi- mental results demonstrated that our proposed methods outper- formed the conventional methods such as location-based and multi-head attention models, and that it could capture different speech/linguistic contexts within the attention-based encoder- decoder framework.",
  "Experi- mental results demonstrated that our proposed methods outper- formed the conventional methods such as location-based and multi-head attention models, and that it could capture different speech/linguistic contexts within the attention-based encoder- decoder framework. In the future work, we will combine the multi-head de- coder architecture with Joint CTC/Attention architecture [11], and evaluate the performance using other databases.",
  "6. References [1] F. Jelinek, \u201cContinuous speech recognition by statistical meth- ods,\u201d Proceedings of the IEEE, vol. 64, no. 4, pp. 532\u2013556, 1976. [2] J. Chorowski, D. Bahdanau, K. Cho, and Y. Bengio, \u201cEnd-to-end continuous speech recognition using attention-based recurrent nn: First results,\u201d arXiv preprint arXiv:1412.1602, 2014. [3] A. Graves, S. Fern\u00b4andez, F. Gomez, and J. Schmidhuber, \u201cCon- nectionist temporal classi\ufb01cation: labelling unsegmented se- quence data with recurrent neural networks,\u201d in Proceedings of the 23rd international conference on Machine learning. ACM, 2006, pp. 369\u2013376. [4] A. Graves and N. Jaitly, \u201cTowards end-to-end speech recognition with recurrent neural networks,\u201d in International Conference on Machine Learning, 2014, pp. 1764\u20131772.",
  "ACM, 2006, pp. 369\u2013376. [4] A. Graves and N. Jaitly, \u201cTowards end-to-end speech recognition with recurrent neural networks,\u201d in International Conference on Machine Learning, 2014, pp. 1764\u20131772. [5] D. Amodei, S. Ananthanarayanan, R. Anubhai, J. Bai, E. Bat- tenberg, C. Case, J. Casper, B. Catanzaro, Q. Cheng, G. Chen et al., \u201cDeep speech 2: End-to-end speech recognition in english and mandarin,\u201d in International Conference on Machine Learn- ing, 2016, pp. 173\u2013182. [6] H. Soltau, H. Liao, and H. Sak, \u201cNeural speech recognizer: Acoustic-to-word lstm model for large vocabulary speech recog- nition,\u201d arXiv preprint arXiv:1610.09975, 2016.",
  "[6] H. Soltau, H. Liao, and H. Sak, \u201cNeural speech recognizer: Acoustic-to-word lstm model for large vocabulary speech recog- nition,\u201d arXiv preprint arXiv:1610.09975, 2016. [7] Y. Miao, M. Gowayyed, and F. Metze, \u201cEesen: End-to-end speech recognition using deep rnn models and wfst-based decoding,\u201d in IEEE Workshop on Automatic Speech Recognition and Under- standing (ASRU). IEEE, 2015, pp. 167\u2013174. [8] J. K. Chorowski, D. Bahdanau, D. Serdyuk, K. Cho, and Y. Ben- gio, \u201cAttention-based models for speech recognition,\u201d in Ad- vances in neural information processing systems, 2015, pp. 577\u2013 585.",
  "577\u2013 585. [9] K. Cho, B. Van Merri\u00a8enboer, C. Gulcehre, D. Bahdanau, F. Bougares, H. Schwenk, and Y. Bengio, \u201cLearning phrase repre- sentations using rnn encoder-decoder for statistical machine trans- lation,\u201d arXiv preprint arXiv:1406.1078, 2014. [10] I. Sutskever, O. Vinyals, and Q. V. Le, \u201cSequence to sequence learning with neural networks,\u201d in Advances in neural information processing systems, 2014, pp. 3104\u20133112. [11] S. Watanabe, T. Hori, S. Kim, J. R. Hershey, and T. Hayashi, \u201cHy- brid ctc/attention architecture for end-to-end speech recognition,\u201d IEEE Journal of Selected Topics in Signal Processing, vol. 11, no. 8, pp. 1240\u20131253, 2017. [12] C.-C.",
  "11, no. 8, pp. 1240\u20131253, 2017. [12] C.-C. Chiu, T. N. Sainath, Y. Wu, R. Prabhavalkar, P. Nguyen, Z. Chen, A. Kannan, R. J. Weiss, K. Rao, K. Gonina et al., \u201cState- of-the-art speech recognition with sequence-to-sequence models,\u201d arXiv preprint arXiv:1712.01769, 2017. [13] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, \u0141. Kaiser, and I. Polosukhin, \u201cAttention is all you need,\u201d in Advances in Neural Information Processing Systems, 2017, pp. 6000\u20136010.",
  "6000\u20136010. [14] W. Chan, N. Jaitly, Q. Le, and O. Vinyals, \u201cListen, attend and spell: A neural network for large vocabulary conversational speech recognition,\u201d in IEEE International Conference on Acous- tics, Speech and Signal Processing (ICASSP). IEEE, 2016, pp. 4960\u20134964. [15] M.-T. Luong, H. Pham, and C. D. Manning, \u201cEffective approaches to attention-based neural machine translation,\u201d arXiv preprint arXiv:1508.04025, 2015. [16] D. Bahdanau, K. Cho, and Y. Bengio, \u201cNeural machine trans- lation by jointly learning to align and translate,\u201d arXiv preprint arXiv:1409.0473, 2014. [17] A. See, P. J. Liu, and C. D. Manning, \u201cGet to the point: Summarization with pointer-generator networks,\u201d arXiv preprint arXiv:1704.04368, 2017.",
  "[17] A. See, P. J. Liu, and C. D. Manning, \u201cGet to the point: Summarization with pointer-generator networks,\u201d arXiv preprint arXiv:1704.04368, 2017. [18] T. Mikolov, M. Kara\ufb01\u00b4at, L. Burget, J. \u02c7Cernock`y, and S. Khu- danpur, \u201cRecurrent neural network based language model,\u201d in Eleventh Annual Conference of the International Speech Commu- nication Association, 2010. [19] P. J. Werbos, \u201cBackpropagation through time: what it does and how to do it,\u201d Proceedings of the IEEE, vol. 78, no. 10, pp. 1550\u2013 1560, 1990. [20] M. D. Zeiler, \u201cAdadelta: an adaptive learning rate method,\u201d arXiv preprint arXiv:1212.5701, 2012.",
  "78, no. 10, pp. 1550\u2013 1560, 1990. [20] M. D. Zeiler, \u201cAdadelta: an adaptive learning rate method,\u201d arXiv preprint arXiv:1212.5701, 2012. [21] K. Maekawa, H. Koiso, S. Furui, and H. Isahara, \u201cSpontaneous speech corpus of japanese.\u201d in LREC. Citeseer, 2000. [22] D. Povey, A. Ghoshal, G. Boulianne, L. Burget, O. Glembek, N. Goel, M. Hannemann, P. Motlicek, Y. Qian, P. Schwarz et al., \u201cThe kaldi speech recognition toolkit,\u201d in IEEE 2011 workshop on automatic speech recognition and understanding, no. EPFL- CONF-192584. IEEE Signal Processing Society, 2011.",
  "EPFL- CONF-192584. IEEE Signal Processing Society, 2011. [23] H. Sak, A. Senior, and F. Beaufays, \u201cLong short-term memory re- current neural network architectures for large scale acoustic mod- eling,\u201d in Fifteenth annual conference of the international speech communication association, 2014. [24] \u201cESPnet,\u201d https://github.com/espnet/espnet."
]