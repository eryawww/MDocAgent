[
  "HIBERT: Document Level Pre-training of Hierarchical Bidirectional Transformers for Document Summarization Xingxing Zhang, Furu Wei and Ming Zhou Microsoft Research Asia, Beijing, China {xizhang,fuwei,mingzhou}@microsoft.com Abstract Neural extractive summarization models usu- ally employ a hierarchical encoder for doc- ument encoding and they are trained us- ing sentence-level labels, which are created heuristically using rule-based methods. Train- ing the hierarchical encoder with these inac- curate labels is challenging. Inspired by the recent work on pre-training transformer sen- tence encoders (Devlin et al., 2018), we pro- pose HIBERT (as shorthand for HIerachical Bidirectional Encoder Representations from Transformers) for document encoding and a method to pre-train it using unlabeled data. We apply the pre-trained HIBERT to our summa- rization model and it outperforms its randomly initialized counterpart by 1.25 ROUGE on the CNN/Dailymail dataset and by 2.0 ROUGE on a version of New York Times dataset. We also achieve the state-of-the-art performance on these two datasets.",
  "We also achieve the state-of-the-art performance on these two datasets. 1 Introduction Automatic document summarization is the task of rewriting a document into its shorter form while still retaining its important content. Over the years, many paradigms for document summariza- tion have been explored (see Nenkova and McK- eown (2011) for an overview). The most popular two among them are extractive approaches and ab- stractive approaches. As the name implies, extrac- tive approaches generate summaries by extract- ing parts of the original document (usually sen- tences), while abstractive methods may generate new words or phrases which are not in the original document. Extractive summarization is usually modeled as a sentence ranking problem with length con- straints (e.g., max number of words or sentences). Top ranked sentences (under constraints) are se- lected as summaries. Early attempts mostly lever- age manually engineered features (Filatova and Hatzivassiloglou, 2004a). Based on these sparse features, sentence are selected using a classi\ufb01er or a regression model.",
  "Early attempts mostly lever- age manually engineered features (Filatova and Hatzivassiloglou, 2004a). Based on these sparse features, sentence are selected using a classi\ufb01er or a regression model. Later, the feature engineering part in this paradigm is replaced with neural net- works. Cheng and Lapata (2016) propose a hierar- chical long short-term memory network (LSTM; Hochreiter and Schmidhuber 1997) to encode a document and then use another LSTM to predict binary labels for each sentence in the document. This architecture is widely adopted recently (Nal- lapati et al., 2017; Narayan et al., 2018; Zhang et al., 2018). Our model also employs a hierarchi- cal document encoder, but we adopt a hierarchical transformer (Vaswani et al., 2017) rather a hier- archical LSTM. Because recent studies (Vaswani et al., 2017; Devlin et al., 2018) show the trans- former model performs better than LSTM in many tasks.",
  "Because recent studies (Vaswani et al., 2017; Devlin et al., 2018) show the trans- former model performs better than LSTM in many tasks. Abstractive models do not attract much atten- tion until recently. They are mostly based on se- quence to sequence (seq2seq) models (Bahdanau et al., 2015), where a document is viewed a se- quence and its summary is viewed as another se- quence. Although seq2seq based summarizers can be equipped with copy mechanism (Gu et al., 2016; See et al., 2017), coverage model (See et al., 2017) and reinforcement learning (Paulus et al., 2017), there is still no guarantee that the generated summaries are grammatical and convey the same meaning as the original document does. It seems that extractive models are more reliable than their abstractive counterparts. However, extractive models require sentence level labels, which are usually not included in most summarization datasets (most datasets only contain document-summary pairs).",
  "It seems that extractive models are more reliable than their abstractive counterparts. However, extractive models require sentence level labels, which are usually not included in most summarization datasets (most datasets only contain document-summary pairs). Sentence la- bels are usually obtained by rule-based methods (e.g., maximizing the ROUGE score between a set of sentences and reference summaries) and may not be accurate. Extractive models proposed re- arXiv:1905.06566v1  [cs.CL]  16 May 2019",
  "cently (Cheng and Lapata, 2016; Nallapati et al., 2017) employ hierarchical document encoders and even have neural decoders, which are complex. Training such complex neural models with inac- curate binary labels is challenging. We observed in our initial experiments on one of our dataset that our extractive model (see Section 3.3 for de- tails) over\ufb01ts to the training set quickly after the second epoch, which indicates the training set may not be fully utilized. Inspired by the recent pre-training work in natural language processing (Peters et al., 2018; Radford et al., 2018; Devlin et al., 2018), our solution to this problem is to \ufb01rst pre-train the \u201ccomplex\u201d\u2019 part (i.e., the hier- archical encoder) of the extractive model on unla- beled data and then we learn to classify sentences with our model initialized from the pre-trained en- coder. In this paper, we propose HIBERT, which stands for HIerachical Bidirectional Encoder Representations from Transformers.",
  "In this paper, we propose HIBERT, which stands for HIerachical Bidirectional Encoder Representations from Transformers. We design an unsupervised method to pre-train HIBERT for document modeling. We apply the pre-trained HIBERT to the task of document summarization and achieve state-of-the-art performance on both the CNN/Dailymail and New York Times dataset. 2 Related Work In this section, we introduce work on extractive summarization, abstractive summarization and pre-trained natural language processing models. For a more comprehensive review of summariza- tion, we refer the interested readers to Nenkova and McKeown (2011) and Mani (2001). Extractive Summarization Extractive summa- rization aims to select important sentences (some- times other textual units such as elementary dis- course units (EDUs)) from a document as its sum- mary.",
  "Extractive Summarization Extractive summa- rization aims to select important sentences (some- times other textual units such as elementary dis- course units (EDUs)) from a document as its sum- mary. It is usually modeled as a sentence rank- ing problem by using the scores from classi\ufb01ers (Kupiec et al., 1995), sequential labeling models (Conroy and O\u2019leary, 2001) as well as integer lin- ear programmers (Woodsend and Lapata, 2010). Early work with these models above mostly lever- age human engineered features such as sentence position and length (Radev et al., 2004), word fre- quency (Nenkova et al., 2006) and event features (Filatova and Hatzivassiloglou, 2004b).",
  "As the very successful applications of neural networks to a wide range of NLP tasks, the man- ually engineered features (for document encod- ing) are replaced with hierarchical LSTMs/CNNs and the sequence labeling (or classi\ufb01cation) model is replaced with an LSTM decoder (Cheng and Lapata, 2016; Nallapati et al., 2017). The ar- chitecture is widely adopted in recent neural ex- tractive models and is extended with reinforce- ment learning (Narayan et al., 2018; Dong et al., 2018), latent variable models (Zhang et al., 2018), joint scoring (Zhou et al., 2018) and iterative doc- ument representation (Chen et al., 2018). Re- cently, transformer networks (Vaswani et al., 2017) achieves good performance in machine translation (Vaswani et al., 2017) and a range of NLP tasks (Devlin et al., 2018; Radford et al., 2018).",
  "Re- cently, transformer networks (Vaswani et al., 2017) achieves good performance in machine translation (Vaswani et al., 2017) and a range of NLP tasks (Devlin et al., 2018; Radford et al., 2018). Different from the extractive models above, we adopt a hierarchical Transformer for document encoding and also propose a method to pre-train the document encoder. Abstractive Summarization Abstractive sum- marization aims to generate the summary of a document with rewriting. Most recent abstractive models (Nallapati et al., 2016) are based on neural sequence to sequence learning (Bahdanau et al., 2015; Sutskever et al., 2014). However, the gen- erated summaries of these models can not be con- trolled (i.e., their meanings can be quite different from the original and contents can be repeated). Therefore, copy mechanism (Gu et al., 2016), cov- erage model (See et al., 2017) and reinforcement learning model optimizing ROUGE (Paulus et al., 2017) are introduced.",
  "Therefore, copy mechanism (Gu et al., 2016), cov- erage model (See et al., 2017) and reinforcement learning model optimizing ROUGE (Paulus et al., 2017) are introduced. These problems are allevi- ated but not solved. There is also an interesting line of work combining extractive and abstractive summarization with reinforcement learning (Chen and Bansal, 2018), fused attention (Hsu et al., 2018) and bottom-up attention (Gehrmann et al., 2018). Our model, which is a very good extractive model, can be used as the sentence extraction com- ponent in these models and potentially improves their performance. Pre-trained NLP Models Most model pre- training methods in NLP leverage the natural or- dering of text. For example, word2vec uses the surrounding words within a \ufb01xed size window to predict the word in the middle with a log bilin- ear model. The resulting word embedding table can be used in other downstream tasks.",
  "For example, word2vec uses the surrounding words within a \ufb01xed size window to predict the word in the middle with a log bilin- ear model. The resulting word embedding table can be used in other downstream tasks. There are other word embedding pre-training methods using similar techniques (Pennington et al., 2014; Bo- janowski et al., 2017). Peters et al. (2018) and Radford et al. (2018) \ufb01nd even a sentence encoder",
  "Figure 1: The architecture of HIBERT during training. senti is a sentence in the document above, which has four sentences in total. sent3 is masked during encod- ing and the decoder predicts the original sent3. (not just word embeddings) can also be pre-trained with language model objectives (i.e., predicting the next or previous word). Language model ob- jective is unidirectional, while many tasks can leverage the context in both directions. Therefore, Devlin et al. (2018) propose the naturally bidi- rectional masked language model objective (i.e., masking several words with a special token in a sentence and then predicting them). All the methods above aim to pre-train word embeddings or sentence encoders, while our method aims to pre-train the hierarchical document encoders (i.e., hierarchical transformers), which is important in summarization. 3 Model In this section, we present our model HIBERT. We \ufb01rst introduce how documents are represented in HIBERT. We then describe our method to pre-train HIBERT and \ufb01nally move on to the application of HIBERT to summarization.",
  "3 Model In this section, we present our model HIBERT. We \ufb01rst introduce how documents are represented in HIBERT. We then describe our method to pre-train HIBERT and \ufb01nally move on to the application of HIBERT to summarization. 3.1 Document Representation Let D = (S1, S2, . . . , S|D|) denote a document, where Si = (wi 1, wi 2, . . . , wi |Si|) is a sentence in D and wi j a word in Si. Note that following common practice in natural language processing literatures, wi |Si| is an arti\ufb01cial EOS (End Of Sentence) token. To obtain the representation of D, we use two en- coders: a sentence encoder to transform each sen- tence in D to a vector and a document encoder to learn sentence representations given their sur- rounding sentences as context. Both the sentence encoder and document encoder are based on the Transformer encoder described in Vaswani et al. (2017). As shown in Figure 1, they are nested in a hierarchical fashion.",
  "Both the sentence encoder and document encoder are based on the Transformer encoder described in Vaswani et al. (2017). As shown in Figure 1, they are nested in a hierarchical fashion. A transformer encoder usually has multiple layers and each layer is com- posed of a multi-head self attentive sub-layer fol- lowed by a feed-forward sub-layer with residual connections (He et al., 2016) and layer normal- izations (Ba et al., 2016). For more details of the Transformer encoder, we refer the interested read- ers to Vaswani et al. (2017). To learn the repre- sentation of Si, Si = (wi 1, wi 2, . . . , wi |Si|) is \ufb01rst mapped into continuous space Ei = (ei 1, ei 2, . . . , ei |Si|) where ei j = e(wi j) + pj (1) where e(wi j) and pj are the word and positional embeddings of wi j, respectively.",
  ". . , ei |Si|) where ei j = e(wi j) + pj (1) where e(wi j) and pj are the word and positional embeddings of wi j, respectively. The word embed- ding matrix is randomly initialized and we adopt the sine-cosine positional embedding (Vaswani et al., 2017)1. Then the sentence encoder (a Trans- former) transforms Ei into a list of hidden rep- resentations (hi 1, hi 2, . . . , hi |Si|). We take the last hidden representation hi |Si| (i.e., the representation at the EOS token) as the representation of sentence Si. Similar to the representation of each word in Si, we also take the sentence position into account. The \ufb01nal representation of Si is \u02c6hi = hi |Si| + pi (2) Note that words and sentences share the same po- sitional embedding matrix. In analogy to the sentence encoder, as shown in Figure 1, the document encoder is yet another Transformer but applies on the sentence level.",
  "In analogy to the sentence encoder, as shown in Figure 1, the document encoder is yet another Transformer but applies on the sentence level. Af- ter running the Transformer on a sequence of sen- tence representations (\u02c6h1, \u02c6h2, . . . , \u02c6h|D|), we ob- tain the context sensitive sentence representations (d1, d2, . . . , d|D|). Now we have \ufb01nished the en- coding of a document with a hierarchical bidirec- tional transformer encoder HIBERT. Note that in previous work, document representation are also 1We use the sine-cosine embedding because it works well and do not introduce additional trainable parameters.",
  "learned with hierarchical models, but each hier- archy is a Recurrent Neural Network (Nallapati et al., 2017; Zhou et al., 2018) or Convolutional Neural Network (Cheng and Lapata, 2016). We choose the Transformer because it outperforms CNN and RNN in machine translation (Vaswani et al., 2017), semantic role labeling (Strubell et al., 2018) and other NLP tasks (Devlin et al., 2018). In the next section we will introduce how we train HIBERT with an unsupervised training objective. 3.2 Pre-training Most recent encoding neural models used in NLP (e.g., RNNs, CNNs or Transformers) can be pre- trained by predicting a word in a sentence (or a text span) using other words within the same sen- tence (or span).",
  "3.2 Pre-training Most recent encoding neural models used in NLP (e.g., RNNs, CNNs or Transformers) can be pre- trained by predicting a word in a sentence (or a text span) using other words within the same sen- tence (or span). For example, ELMo (Peters et al., 2018) and OpenAI-GPT (Radford et al., 2018) predict a word using all words on its left (or right); while word2vec (Mikolov et al., 2013) predicts one word with its surrounding words in a \ufb01xed window and BERT (Devlin et al., 2018) predicts (masked) missing words in a sentence given all the other words. All the models above learn the representation of a sentence, where its basic units are words. HIBERT aims to learn the representation of a doc- ument, where its basic units are sentences. There- fore, a natural way of pre-training a document level model (e.g., HIBERT) is to predict a sentence (or sentences) instead of a word (or words).",
  "HIBERT aims to learn the representation of a doc- ument, where its basic units are sentences. There- fore, a natural way of pre-training a document level model (e.g., HIBERT) is to predict a sentence (or sentences) instead of a word (or words). We could predict a sentence in a document with all the sentences on its left (or right) as in a (document level) language model. However, in summariza- tion, context on both directions are available. We therefore opt to predict a sentence using all sen- tences on both its left and right. Document Masking Speci\ufb01cally, suppose D = (S1, S2, . . . , S|D|) is a document, where Si = (wi 1, wi 2, . . . , wi |Si|) is a sentence in it. We ran- domly select 15% of the sentences in D and mask them. Then, we predict these masked sentences.",
  ". . , wi |Si|) is a sentence in it. We ran- domly select 15% of the sentences in D and mask them. Then, we predict these masked sentences. The prediction task here is similar with the Cloze task (Taylor, 1953; Devlin et al., 2018), but the missing part is a sentence. However, during test time the input document is not masked, to make our model can adapt to documents without masks, we do not always mask the selected sentences. Once a sentence is selected (as one of the 15% selected masked sentences), we transform it with one of three methods below. We will use an ex- ample to demonstrate the transformation. For in- stance, we have the following document and the second sentence is selected2: William Shakespeare is a poet . He died in 1616 . He is regarded as the greatest writer . In 80% of the cases, we mask the selected sentence (i.e., we replace each word in the sen- tence with a mask token [MASK]). The document above becomes William Shakespeare is a poet .",
  "He died in 1616 . He is regarded as the greatest writer . In 80% of the cases, we mask the selected sentence (i.e., we replace each word in the sen- tence with a mask token [MASK]). The document above becomes William Shakespeare is a poet . [MASK] [MASK] [MASK] [MASK] [MASK] He is regarded as the greatest writer . (where \u201cHe died in 1616 . \u201d is masked). In 10% of the cases, we keep the selected sen- tence as it is. This strategy is to simulate the input document during test time (with no masked sen- tences). In the rest 10% cases, we replace the selected sentence with a random sentence. In this case, the document after transformation is William Shakespeare is a poet . Birds can fly . He is regarded as the greatest writer . The second sentence is replaced with \u201cBirds can fly .\u201d This strategy intends to add some noise during training and make the model more robust. Sentence Prediction After the application of the above procedures to a document D = (S1, S2, . . .",
  "The second sentence is replaced with \u201cBirds can fly .\u201d This strategy intends to add some noise during training and make the model more robust. Sentence Prediction After the application of the above procedures to a document D = (S1, S2, . . . , S|D|), we obtain the masked docu- ment eD = ( \u02dcS1, \u02dcS2, . . . , \u02dc S|D|). Let K denote the set of indicies of selected sentences in D. Now we are ready to predict the masked sentences M = {Sk|k \u2208K} using eD. We \ufb01rst apply the hierarchical encoder HIBERT in Section 3.1 to eD and obtain its context sensitive sentence rep- resentations ( \u02dcd1, \u02dcd2, . . . , \u02dc d|D|). We will demon- strate how we predict the masked sentence Sk = (wk 0, wk 1, wk 2, . . .",
  ". . , \u02dc d|D|). We will demon- strate how we predict the masked sentence Sk = (wk 0, wk 1, wk 2, . . . , wk |Sk|) one word per step (wk 0 is an arti\ufb01cially added BOS token). At the jth step, we predict wk j given wk 0, . . . , wk j\u22121 and eD. \u02dc dk al- ready encodes the information of eD with a focus around its kth sentence \u02dcSk. As shown in Figure 1, we employ a Transformer decoder (Vaswani et al., 2017) to predict wk j with \u02dc dk as its additional input. The transformer decoder we used here is slightly different from the original one. The original de- coder employs two multi-head attention layers to 2There might be multiple sentences selected in a docu- ment, but in this example there is only one.",
  "include both the context in encoder and decoder, while we only need one to learn the decoder con- text, since the context in encoder is a vector (i.e., \u02dc dk). Speci\ufb01cally, after applying the word and po- sitional embeddings to (wk 0, . . . , wk j\u22121), we obtain eEk 1:j\u22121 = ( \u02dcek 0, . . . , \u02dc ek j\u22121) (also see Equation 1). Then we apply multi-head attention sub-layer to eEk 1:j\u22121: \u02dc hj\u22121 = MultiHead(qj\u22121, Kj\u22121, Vj\u22121) qj\u22121 = WQ \u02dc ek j\u22121 Kj\u22121 = WK eEk 1:j\u22121 Kj\u22121 = WV eEk 1:j\u22121 (3) where qj\u22121, Kj\u22121, Vj\u22121 are the input query, key and value matrices of the multi-head attention function (Vaswani et al., 2017) MultiHead(\u00b7, \u00b7, \u00b7), respectively.",
  "WQ \u2208Rd\u00d7d, WK \u2208Rd\u00d7d and WV \u2208Rd\u00d7d are weight matrices. Then we include the information of eD by addi- tion: \u02dc xj\u22121 = \u02dc hj\u22121 + \u02dc dk (4) We also follow a feedforward sub-layer (one hid- den layer with ReLU (Glorot et al., 2011) acti- vation function) after \u02dc xj\u22121 as in Vaswani et al. (2017): \u02dc gj\u22121 = Wff 2 max(0, Wff 1 \u02dc xj\u22121 + b1) + b2 (5) Note that the transformer decoder can have multi- ple layers by applying Equation (3) to (5) multiple times and we only show the computation of one layer for simplicity. The probability of wk j given wk 0, . . .",
  "The probability of wk j given wk 0, . . . , wk j\u22121 and eD is: p(wk j |wk 0:j\u22121, eD) = softmax(WO \u02dc gj\u22121) (6) Finally the probability of all masked sentences M given eD is p(M| eD) = Y k\u2208K |Sk| Y j=1 p(wk j |wk 0:j\u22121, eD) (7) The model above can be trained by minimizing the negative log-likelihood of all masked sentences given their paired documents. We can in the- ory have unlimited amount of training data for HIBERT, since they can be generated automati- cally from (unlabeled) documents. Therefore, we can \ufb01rst train HIBERT on large amount of data and then apply it to downstream tasks. In the next sec- tion, we will introduce its application to document summarization. Figure 2: The architecture of our extractive summa- rization model. The sentence and document level trans- formers can be pretrained.",
  "In the next sec- tion, we will introduce its application to document summarization. Figure 2: The architecture of our extractive summa- rization model. The sentence and document level trans- formers can be pretrained. 3.3 Extractive Summarization Extractive summarization selects the most impor- tant sentences in a document as its summary. In this section, summarization is modeled as a se- quence labeling problem. Speci\ufb01cally, a docu- ment is viewed as a sequence of sentences and a summarization model is expected to assign a True or False label for each sentence, where True means this sentence should be included in the summary. In the following, we will intro- duce the details of our summarization model based HIBERT. Let D = (S1, S2, . . . , S|D|) denote a docu- ment and Y = (y1, y2, . . . , y|D|) its sentence labels (methods for obtaining these labels are in Section 4.1).",
  ". . , S|D|) denote a docu- ment and Y = (y1, y2, . . . , y|D|) its sentence labels (methods for obtaining these labels are in Section 4.1). As shown in Figure 2, we \ufb01rst apply the hierarchical bidirectional trans- former encoder HIBERT to D and yields the con- text dependent representations for all sentences (d1, d2, . . . , d|D|). The probability of the label of Si can be estimated using an additional linear pro- jection and a softmax: p(yi|D) = softmax(WS di) (8) where WS \u2208R2\u00d7d. The summarization model can be trained by minimizing the negative log- likelihood of all sentence labels given their paired documents. 4 Experiments In this section we assess the performance of our model on the document summarization task. We",
  "\ufb01rst introduce the dataset we used for pre-training and the summarization task and give implementa- tion details of our model. We also compare our model against multiple previous models. 4.1 Datasets We conducted our summarization experiments on the non-anonymous version CNN/Dailymail (CNNDM) dataset (Hermann et al., 2015; See et al., 2017), and the New York Times dataset (Durrett et al., 2016; Xu and Durrett, 2019). For the CNNDM dataset, we preprocessed the dataset using the scripts from the authors of See et al. (2017)3. The resulting dataset contains 287,226 documents with summaries for training, 13,368 for validation and 11,490 for test. Following (Xu and Durrett, 2019; Durrett et al., 2016), we cre- ated the NYT50 dataset by removing the docu- ments whose summaries are shorter than 50 words from New York Times dataset.",
  "Following (Xu and Durrett, 2019; Durrett et al., 2016), we cre- ated the NYT50 dataset by removing the docu- ments whose summaries are shorter than 50 words from New York Times dataset. We used the same training/validation/test splits as in Xu and Dur- rett (2019), which contain 137,778 documents for training, 17,222 for validation and 17,223 for test. To create sentence level labels for extractive sum- marization, we used a strategy similar to Nallapati et al. (2017). We label the subset of sentences in a document that maximizes ROUGE (Lin, 2004) (against the human summary) as True and all other sentences as False. To unsupervisedly pre-train our document model HIBERT (see Section 3.2 for details), we created the GIGA-CM dataset (totally 6,626,842 documents and 2,854 million words), which in- cludes 6,339,616 documents sampled from the En- glish Gigaword4 dataset and the training split of the CNNDM dataset.",
  "We used the validation set of CNNDM as the validation set of GIGA-CM as well. As in See et al. (2017), documents and summaries in CNNDM, NYT50 and GIGA-CM are all segmented and tokenized using Stanford CoreNLP toolkit (Manning et al., 2014). To re- duce the vocabulary size, we applied byte pair en- coding (BPE; Sennrich et al. 2016) to all of our datasets. To limit the memory consumption dur- ing training, we limit the length of each sentence to be 50 words (51th word and onwards are re- moved) and split documents with more than 30 sentences into smaller documents with each con- taining at most 30 sentences. 3Scripts publicly available at https://github.com/ abisee/cnn-dailymail 4https://catalog.ldc.upenn.edu/LDC2012T21 4.2 Implementation Details Our model is trained in three stages, which in- cludes two pre-training stages and one \ufb01netuning stage.",
  "The \ufb01rst stage is the open-domain pre- training and in this stage we train HIBERT with the pre-training objective (Section 3.2) on GIGA-CM dataset. In the second stage, we perform the in- domain pre-training on the CNNDM (or NYT50) dataset still with the same pre-training objective. In the \ufb01nal stage, we \ufb01netune HIBERT in the sum- marization model (Section 3.3) to predict extrac- tive sentence labels on CNNDM (or NYT50). The sizes of the sentence and document level Transformers as well as the Transformer decoder in HIBERT are the same. Let L denote the num- ber of layers in Transformer, H the hidden size and A the number of attention heads. As in (Vaswani et al., 2017; Devlin et al., 2018), the hid- den size of the feedforward sublayer is 4H.",
  "As in (Vaswani et al., 2017; Devlin et al., 2018), the hid- den size of the feedforward sublayer is 4H. We mainly trained two model sizes: HIBERTS (L = 6, H = 512 and A = 8) and HIBERTM (L = 6, H = 768 and A = 12). We trained both HIBERTS and HIBERTM on a single machine with 8 Nvidia Tesla V100 GPUs with a batch size of 256 doc- uments. We optimized our models using Adam with learning rate of 1e-4, \u03b21 = 0.9, \u03b22 = 0.999, L2 norm of 0.01, learning rate warmup 10,000 steps and learning rate decay afterwards using the strategies in Vaswani et al. (2017). The dropout rate in all layers are 0.1.",
  "(2017). The dropout rate in all layers are 0.1. In pre-training stages, we trained our models until validation perplexities do not decrease signi\ufb01cantly (around 45 epochs on GIGA-CM dataset and 100 to 200 epochs on CN- NDM and NYT50). Training HIBERTM for one epoch on GIGA-CM dataset takes approximately 20 hours. Our models during \ufb01ne-tuning stage can be trained on a single GPU. The hyper-parameters are almost identical to these in the pre-training stages except that the learning rate is 5e-5, the batch size is 32, the warmup steps are 4,000 and we train our models for 5 epochs. During inference, we rank sentences using p(yi|D) (Equation (8)) and choose the top K sentences as summary, where K is tuned on the validation set. 4.3 Evaluations We evaluated the quality of summaries from dif- ferent systems automatically using ROUGE (Lin, 2004). We reported the full length F1 based ROUGE-1, ROUGE-2 and ROUGE-L on the",
  "Model R-1 R-2 R-L Pointer+Coverage 39.53 17.28 36.38 Abstract-ML+RL 39.87 15.82 36.90 DCA 41.69 19.47 37.92 SentRewrite 40.88 17.80 38.54 InconsisLoss 40.68 17.97 37.13 Bottom-Up 41.22 18.68 38.34 Lead3 40.34 17.70 36.57 SummaRuNNer 39.60 16.20 35.30 NeuSum 40.11 17.52 36.39 Refresh 40.00 18.20 36.60 NeuSum-MMR 41.59 19.01 37.98 BanditSum 41.50 18.70 37.60 JECS 41.70 18.50 37.90 LatentSum 41.05 18.77 37.54 HierTransformer 41.11 18.69 37.53 BERT 41.82 19.48 38.",
  "70 37.60 JECS 41.70 18.50 37.90 LatentSum 41.05 18.77 37.54 HierTransformer 41.11 18.69 37.53 BERT 41.82 19.48 38.30 HIBERTS (in-domain) 42.10 19.70 38.53 HIBERTS 42.31 19.87 38.78 HIBERTM 42.37 19.95 38.83 Table 1: Results of various models on the CNNDM test set using full-length F1 ROUGE-1 (R-1), ROUGE-2 (R- 2), and ROUGE-L (R-L). CNNDM and NYT50 datasets. We compute ROUGE scores using the ROUGE-1.5.5.pl script. Additionally, we also evaluated the generated summaries by eliciting human judgments. Fol- lowing (Cheng and Lapata, 2016; Narayan et al., 2018), we randomly sampled 20 documents from the CNNDM test set.",
  "Additionally, we also evaluated the generated summaries by eliciting human judgments. Fol- lowing (Cheng and Lapata, 2016; Narayan et al., 2018), we randomly sampled 20 documents from the CNNDM test set. Participants were presented with a document and a list of summaries produced by different systems. We asked subjects to rank these summaries (ties allowed) by taking informa- tiveness (is the summary capture the important in- formation from the document?) and \ufb02uency (is the summary grammatical?) into account. Each docu- ment is annotated by three different subjects. 4.4 Results Our main results on the CNNDM dataset are shown in Table 1, with abstractive models in the top block and extractive models in the bot- tom block. Pointer+Coverage (See et al., 2017), Abstract-ML+RL (Paulus et al., 2017) and DCA (Celikyilmaz et al., 2018) are all sequence to se- quence learning based models with copy and cov- erage modeling, reinforcement learning and deep communicating agents extensions.",
  "SentRewrite (Hsu et al., 2018) and InconsisLoss (Chen and Bansal, 2018) all try to decompose the word by word summary generation into sentence selection from document and \u201csentence\u201d level summariza- tion (or compression). Bottom-Up (Gehrmann et al., 2018) generates summaries by combines a word prediction model with the decoder attention model. The extractive models are usually based on hierarchical encoders (SummaRuNNer; Nalla- pati et al. 2017 and NeuSum; Cheng and Lapata 2016). They have been extended with reinforce- ment learning (Refresh; Narayan et al. 2018 and BanditSum; Dong et al. 2018), Maximal Marginal Relevance (NeuSum-MMR; Zhou et al. 2018), la- tent variable modeling (LatentSum; Zhang et al. 2018) and syntactic compression (JECS; Xu and Durrett 2019). Lead3 is a baseline which sim- ply selects the \ufb01rst three sentences.",
  "2018), la- tent variable modeling (LatentSum; Zhang et al. 2018) and syntactic compression (JECS; Xu and Durrett 2019). Lead3 is a baseline which sim- ply selects the \ufb01rst three sentences. Our model HIBERTS (in-domain), which only use one pre- training stage on the in-domain CNNDM training set, outperforms all of them and differences be- tween them are all signi\ufb01cant with a 0.95 con\ufb01- dence interval (estimated with the ROUGE script). Note that pre-training HIBERTS (in-domain) is very fast and it only takes around 30 minutes for one epoch on the CNNDM training set. Our models with two pre-training stages (HIBERTS) or larger size (HIBERTM) perform even better and HIBERTM outperforms BERT by 0.5 ROUGE5. We also implemented two baselines. One is the hierarchical transformer summarization model (HeriTransfomer; described in 3.3) without pre- training.",
  "We also implemented two baselines. One is the hierarchical transformer summarization model (HeriTransfomer; described in 3.3) without pre- training. Note the setting for HeriTransfomer is (L = 4,H = 300 and A = 4) 6. We can see that the pre-training (details in Section 3.2) leads to a +1.25 ROUGE improvement. Another base- line is based on a pre-trained BERT (Devlin et al., 2018)7 and \ufb01netuned on the CNNDM dataset. We used the BERTbase model because our 16G RAM V100 GPU cannot \ufb01t BERTlarge for the summa- rization task even with batch size of 1. The posi- tional embedding of BERT supports input length up to 512 words, we therefore split documents with more than 10 sentences into multiple blocks 5The difference is signi\ufb01cant according to the ROUGE script. 6We tried deeper and larger models, but obtained inferior results, which may indicates training large or deep models on this dataset without a good initialization is challenging.",
  "6We tried deeper and larger models, but obtained inferior results, which may indicates training large or deep models on this dataset without a good initialization is challenging. 7Our BERT baseline is adapted from this imple- mentation https://github.com/huggingface/ pytorch-pretrained-BERT",
  "Models R-1 R-2 R-L Lead 41.80 22.60 35.00 EXTRACTION 44.30 25.50 37.10 JECS 45.50 25.30 38.20 HeriTransformer 47.44 28.08 39.56 BERT 48.38 29.04 40.53 HIBERTS (in-domain) 48.92 29.58 41.10 HIBERTM (in-domain) 49.06 29.70 41.23 HIBERTS 49.25 29.92 41.43 HIBERTM 49.47 30.11 41.63 Table 2: Results of various models on the NYT50 test set using full-length F1 ROUGE. HIBERTS (in- domain) and HIBERTM (in-domain) only uses one pre- training stage on the NYT50 training set.",
  "HIBERTS (in- domain) and HIBERTM (in-domain) only uses one pre- training stage on the NYT50 training set. Pretraining Strategies R-1 R-2 R-L Open-Domain 42.97 20.31 39.51 In-Domain 42.93 20.28 39.46 Open+In-Domain 43.19 20.46 39.72 Table 3: Results of summarization model (HIBERTS setting) with different pre-training strategies on the CNNDM validation set using full-length F1 ROUGE. (each block with 10 sentences8). We feed each block (the BOS and EOS tokens of each sentence are replaced with [CLS] and [SEP] tokens) into BERT and use the representation at [CLS] token to classify each sentence. Our model HIBERTS outperforms BERT by 0.4 to 0.5 ROUGE despite with only half the number of model parameters (HIBERTS 54.6M v.s. BERT 110M). Results on the NYT50 dataset show the similar trends (see Table 2).",
  "BERT 110M). Results on the NYT50 dataset show the similar trends (see Table 2). EXTRACTION is a extrac- tive model based hierarchical LSTM and we use the numbers reported by Xu and Durrett (2019). The improvement of HIBERTM over the baseline without pre-training (HeriTransformer) becomes 2.0 ROUGE. HIBERTS (in-domain), HIBERTM (in-domain), HIBERTS and HIBERTM all outper- form BERT signi\ufb01cantly according to the ROUGE script. We also conducted human experiment with 20 randomly sampled documents from the CNNDM test set. We compared our model HIBERTM against Lead3, DCA, Latent, BERT and the human reference (Human)9. We asked the subjects to rank 8We use 10 sentences per block, because maximum sen- tence length 50 \u00d7 10 < 512 (maximum BERT supported length). The last block of a document may have less than 10 sentences. 9We obtained the outputs of DCA and Latent via emails.",
  "The last block of a document may have less than 10 sentences. 9We obtained the outputs of DCA and Latent via emails. Models 1st 2nd 3rd 4th 5th 6th MeanR Lead3 0.03 0.18 0.15 0.30 0.30 0.03 3.75 DCA 0.08 0.15 0.18 0.20 0.15 0.23 3.88 Latent 0.05 0.33 0.28 0.20 0.13 0.00 3.03 BERT 0.13 0.37 0.32 0.15 0.03 0.00 2.58 HIBERTM 0.30 0.35 0.25 0.10 0.00 0.00 2.15 Human 0.58 0.15 0.20 0.00 0.03 0.03 1.85 Table 4: Human evaluation: proportions of rankings and mean ranks (MeanR; lower is better) of various models.",
  "the outputs of these systems from best to worst. As shown in Table 4, the output of HIBERTM is selected as the best in 30% of cases and we ob- tained lower mean rank than all systems except for Human. We also converted the rank numbers into ratings (rank i to 7 \u2212i) and applied student t-test on the ratings. HIBERTM is signi\ufb01cantly different from all systems in comparison (p < 0.05), which indicates our model still lags behind Human, but is better than all other systems. Pre-training Strategies As mentioned earlier, our pre-training includes two stages. The \ufb01rst stage is the open-domain pre-training stage on the GIGA-CM dataset and the following stage is the in-domain pre-training on the CNNDM (or NYT50) dataset. As shown in Table 3, we pretrained HIBERTS using only open-domain stage (Open-Domain), only in-domain stage (In- Domain) or both stages (Open+In-Domain) and applied it to the CNNDM summarization task.",
  "As shown in Table 3, we pretrained HIBERTS using only open-domain stage (Open-Domain), only in-domain stage (In- Domain) or both stages (Open+In-Domain) and applied it to the CNNDM summarization task. Re- sults on the validation set of CNNDM indicate the two-stage pre-training process is necessary. 5 Conclusions The core part of a neural extractive summariza- tion model is the hierarchical document encoder. We proposed a method to pre-train document level hierarchical bidirectional transformer encoders on unlabeled data. When we only pre-train hierar- chical transformers on the training sets of summa- rization datasets with our proposed objective, ap- plication of the pre-trained hierarchical transform- ers to extractive summarization models already leads to wide improvement of summarization per- formance. Adding the large open-domain dataset to pre-training leads to even better performance. In the future, we plan to apply models to other tasks that also require hierarchical document en- codings (e.g., document question answering). We are also interested in improving the architectures",
  "of hierarchical document encoders and designing other objectives to train hierarchical transformers. References Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hin- ton. 2016. Layer normalization. arXiv preprint arXiv:1607.06450. Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben- gio. 2015. Neural machine translation by jointly learning to align and translate. In In Proceedings of the 3rd International Conference on Learning Rep- resentations, San Diego, California. Piotr Bojanowski, Edouard Grave, Armand Joulin, and Tomas Mikolov. 2017. Enriching word vectors with subword information. Transactions of the Associa- tion for Computational Linguistics, 5:135\u2013146. Asli Celikyilmaz, Antoine Bosselut, Xiaodong He, and Yejin Choi. 2018. Deep communicating agents for abstractive summarization.",
  "Transactions of the Associa- tion for Computational Linguistics, 5:135\u2013146. Asli Celikyilmaz, Antoine Bosselut, Xiaodong He, and Yejin Choi. 2018. Deep communicating agents for abstractive summarization. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Hu- man Language Technologies, Volume 1 (Long Pa- pers), pages 1662\u20131675, New Orleans, Louisiana. Xiuying Chen, Shen Gao, Chongyang Tao, Yan Song, Dongyan Zhao, and Rui Yan. 2018. Iterative docu- ment representation learning towards summarization with polishing. In Proceedings of the 2018 Con- ference on Empirical Methods in Natural Language Processing, pages 4088\u20134097. Association for Com- putational Linguistics. Yen-Chun Chen and Mohit Bansal. 2018. Fast abstrac- tive summarization with reinforce-selected sentence rewriting.",
  "Association for Com- putational Linguistics. Yen-Chun Chen and Mohit Bansal. 2018. Fast abstrac- tive summarization with reinforce-selected sentence rewriting. In Proceedings of the 56th Annual Meet- ing of the Association for Computational Linguistics (Volume 1: Long Papers), pages 675\u2013686. Associa- tion for Computational Linguistics. Jianpeng Cheng and Mirella Lapata. 2016. Neural summarization by extracting sentences and words. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 484\u2013494, Berlin, Germany. John M Conroy and Dianne P O\u2019leary. 2001. Text sum- marization via hidden markov models. In Proceed- ings of the 24th annual international ACM SIGIR conference on Research and development in infor- mation retrieval, pages 406\u2013407. ACM. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018.",
  "In Proceed- ings of the 24th annual international ACM SIGIR conference on Research and development in infor- mation retrieval, pages 406\u2013407. ACM. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018. BERT: Pre-training of Deep Bidirectional Transformers for Language Un- derstanding. arXiv preprint arXiv:1810.04805. Yue Dong, Yikang Shen, Eric Crawford, Herke van Hoof, and Jackie Chi Kit Cheung. 2018. Bandit- sum: Extractive summarization as a contextual ban- dit. In Proceedings of the 2018 Conference on Em- pirical Methods in Natural Language Processing, pages 3739\u20133748. Association for Computational Linguistics. Greg Durrett, Taylor Berg-Kirkpatrick, and Dan Klein. 2016. Learning-based single-document summariza- tion with compression and anaphoricity constraints. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1998\u20132008. Association for Computational Linguistics.",
  "2016. Learning-based single-document summariza- tion with compression and anaphoricity constraints. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1998\u20132008. Association for Computational Linguistics. Elena Filatova and Vasileios Hatzivassiloglou. 2004a. Event-based extractive summarization. In Text Sum- marization Branches Out: Proceedings of the ACL- 04 Workshop, pages 104\u2013111, Barcelona, Spain. Elena Filatova and Vasileios Hatzivassiloglou. 2004b. Event-based extractive summarization. Sebastian Gehrmann, Yuntian Deng, and Alexander Rush. 2018. Bottom-up abstractive summarization. In Proceedings of the 2018 Conference on Empiri- cal Methods in Natural Language Processing, pages 4098\u20134109. Association for Computational Linguis- tics. Xavier Glorot, Antoine Bordes, and Yoshua Bengio. 2011. Deep sparse recti\ufb01er neural networks.",
  "Association for Computational Linguis- tics. Xavier Glorot, Antoine Bordes, and Yoshua Bengio. 2011. Deep sparse recti\ufb01er neural networks. In Pro- ceedings of the fourteenth international conference on arti\ufb01cial intelligence and statistics, pages 315\u2013 323. Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O.K. Li. 2016. Incorporating copying mechanism in sequence-to-sequence learning. In Proceedings of the 54th Annual Meeting of the Association for Com- putational Linguistics (Volume 1: Long Papers), pages 1631\u20131640. Association for Computational Linguistics. Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning for image recog- nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 770\u2013 778. Karl Moritz Hermann, Tomas Kocisky, Edward Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su- leyman, and Phil Blunsom.",
  "In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 770\u2013 778. Karl Moritz Hermann, Tomas Kocisky, Edward Grefenstette, Lasse Espeholt, Will Kay, Mustafa Su- leyman, and Phil Blunsom. 2015. Teaching ma- chines to read and comprehend. In Advances in Neu- ral Information Processing Systems, pages 1693\u2013 1701. Curran Associates, Inc. Sepp Hochreiter and J\u00a8urgen Schmidhuber. 1997. Long short-term memory. Neural computation, 9(8):1735\u20131780. Wan-Ting Hsu, Chieh-Kai Lin, Ming-Ying Lee, Kerui Min, Jing Tang, and Min Sun. 2018. A uni\ufb01ed model for extractive and abstractive summarization using inconsistency loss. In Proceedings of the 56th Annual Meeting of the Association for Computa- tional Linguistics (Volume 1: Long Papers), pages 132\u2013141. Association for Computational Linguis- tics.",
  "Julian Kupiec, Jan Pedersen, and Francine Chen. 1995. A trainable document summarizer. In Proceedings of the 18th annual international ACM SIGIR confer- ence on Research and development in information retrieval, pages 68\u201373. ACM. Chin-Yew Lin. 2004. Rouge: A package for automatic evaluation of summaries. In Text Summarization Branches Out: Proceedings of the ACL-04 Work- shop, pages 74\u201381, Barcelona, Spain. Inderjeet Mani. 2001. Automatic Summarization. John Benjamins Pub Co. Christopher Manning, Mihai Surdeanu, John Bauer, Jenny Finkel, Steven Bethard, and David McClosky. 2014. The stanford corenlp natural language pro- cessing toolkit. In Proceedings of 52nd annual meeting of the association for computational lin- guistics: system demonstrations, pages 55\u201360. Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor- rado, and Jeff Dean. 2013.",
  "In Proceedings of 52nd annual meeting of the association for computational lin- guistics: system demonstrations, pages 55\u201360. Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor- rado, and Jeff Dean. 2013. Distributed representa- tions of words and phrases and their compositional- ity. In Advances in neural information processing systems, pages 3111\u20133119. Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017. Summarunner: A recurrent neural network based se- quence model for extractive summarization of doc- uments. In In Proceedings of the 31st AAAI Con- ference on Arti\ufb01cial Intelligence, pages 3075\u20133091, San Francisco, California. Ramesh Nallapati, Bowen Zhou, Caglar Gulcehre, Bing Xiang, et al. 2016. Abstractive text summa- rization using sequence-to-sequence rnns and be- yond. arXiv preprint arXiv:1602.06023.",
  "2016. Abstractive text summa- rization using sequence-to-sequence rnns and be- yond. arXiv preprint arXiv:1602.06023. Shashi Narayan, Shay B. Cohen, and Mirella Lapata. 2018. Ranking sentences for extractive summariza- tion with reinforcement learning. In Proceedings of the 2018 Conference of the North American Chap- ter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Pa- pers), pages 1747\u20131759, New Orleans, Louisiana. Ani Nenkova and Kathleen McKeown. 2011. Auto- matic summarization. Foundations and Trends in Information Retrieval, 5(2\u20133):103\u2013233. Ani Nenkova, Lucy Vanderwende, and Kathleen McK- eown. 2006. A compositional context sensitive multi-document summarizer: exploring the factors that in\ufb02uence summarization. In Proceedings of the 29th annual international ACM SIGIR confer- ence on Research and development in information retrieval, pages 573\u2013580.",
  "2006. A compositional context sensitive multi-document summarizer: exploring the factors that in\ufb02uence summarization. In Proceedings of the 29th annual international ACM SIGIR confer- ence on Research and development in information retrieval, pages 573\u2013580. ACM. Romain Paulus, Caiming Xiong, and Richard Socher. 2017. A deep reinforced model for abstractive sum- marization. arXiv preprint arXiv:1705.04304. Jeffrey Pennington, Richard Socher, and Christopher Manning. 2014. Glove: Global vectors for word representation. In Proceedings of the 2014 confer- ence on empirical methods in natural language pro- cessing (EMNLP), pages 1532\u20131543. Matthew Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer. 2018. Deep contextualized word repre- sentations.",
  "Matthew Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer. 2018. Deep contextualized word repre- sentations. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pages 2227\u2013 2237. Association for Computational Linguistics. Dragomir Radev, Timothy Allison, Sasha Blair- Goldensohn, John Blitzer, Arda C\u00b8 elebi, Stanko Dimitrov, Elliott Drabek, Ali Hakim, Wai Lam, Danyu Liu, Jahna Otterbacher, Hong Qi, Horacio Saggion, Simone Teufel, Michael Topper, Adam Winkel, and Zhu Zhang. 2004. Mead - a plat- form for multidocument multilingual text summa- rization. In Proceedings of the Fourth International Conference on Language Resources and Evaluation (LREC\u201904). European Language Resources Associ- ation (ELRA).",
  "2004. Mead - a plat- form for multidocument multilingual text summa- rization. In Proceedings of the Fourth International Conference on Language Resources and Evaluation (LREC\u201904). European Language Resources Associ- ation (ELRA). Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. 2018. Improving language under- standing by generative pre-training. URL https://s3- us-west-2. amazonaws. com/openai-assets/research- covers/languageunsupervised/language under- standing paper. pdf. Abigail See, Peter J. Liu, and Christopher D. Manning. 2017. Get to the point: Summarization with pointer- generator networks. In Proceedings of the 55th An- nual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1073\u2013 1083, Vancouver, Canada. Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016. Neural machine translation of rare words with subword units.",
  "Rico Sennrich, Barry Haddow, and Alexandra Birch. 2016. Neural machine translation of rare words with subword units. In Proceedings of the 54th An- nual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1715\u2013 1725. Association for Computational Linguistics. Emma Strubell, Patrick Verga, Daniel Andor, David Weiss, and Andrew McCallum. 2018. Linguistically-informed self-attention for semantic role labeling. In Proceedings of the 2018 Confer- ence on Empirical Methods in Natural Language Processing, pages 5027\u20135038. Association for Computational Linguistics. Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014. Sequence to sequence learning with neural net- works. In Advances in neural information process- ing systems, pages 3104\u20133112. Wilson L Taylor. 1953. cloze procedure: A new tool for measuring readability. Journalism Bulletin, 30(4):415\u2013433.",
  "Sequence to sequence learning with neural net- works. In Advances in neural information process- ing systems, pages 3104\u20133112. Wilson L Taylor. 1953. cloze procedure: A new tool for measuring readability. Journalism Bulletin, 30(4):415\u2013433. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz",
  "Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Pro- cessing Systems, pages 5998\u20136008. Kristian Woodsend and Mirella Lapata. 2010. Auto- matic generation of story highlights. In Proceed- ings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 565\u2013574, Up- psala, Sweden. Jiacheng Xu and Greg Durrett. 2019. Neural extrac- tive text summarization with syntactic compression. arXiv preprint arXiv:1902.00863. Xingxing Zhang, Mirella Lapata, Furu Wei, and Ming Zhou. 2018. Neural latent extractive document sum- marization. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Pro- cessing, pages 779\u2013784. Association for Computa- tional Linguistics. Qingyu Zhou, Nan Yang, Furu Wei, Shaohan Huang, Ming Zhou, and Tiejun Zhao. 2018.",
  "Association for Computa- tional Linguistics. Qingyu Zhou, Nan Yang, Furu Wei, Shaohan Huang, Ming Zhou, and Tiejun Zhao. 2018. Neural docu- ment summarization by jointly learning to score and select sentences. In Proceedings of the 56th Annual Meeting of the Association for Computational Lin- guistics (Volume 1: Long Papers), pages 654\u2013663. Association for Computational Linguistics."
]