{
    "config": {
        "query_token_id": "[unused0]",
        "doc_token_id": "[unused1]",
        "query_token": "[Q]",
        "doc_token": "[D]",
        "ncells": null,
        "centroid_score_threshold": null,
        "ndocs": null,
        "load_index_with_mmap": false,
        "index_path": null,
        "index_bsize": 32,
        "nbits": 4,
        "kmeans_niters": 20,
        "resume": false,
        "pool_factor": 1,
        "clustering_mode": "hierarchical",
        "protected_tokens": 0,
        "similarity": "cosine",
        "bsize": 64,
        "accumsteps": 1,
        "lr": 1e-5,
        "maxsteps": 400000,
        "save_every": null,
        "warmup": 20000,
        "warmup_bert": null,
        "relu": false,
        "nway": 64,
        "use_ib_negatives": true,
        "reranker": false,
        "distillation_alpha": 1.0,
        "ignore_scores": false,
        "model_name": null,
        "query_maxlen": 32,
        "attend_to_mask_tokens": false,
        "interaction": "colbert",
        "dim": 128,
        "doc_maxlen": 256,
        "mask_punctuation": true,
        "checkpoint": "colbert-ir\/colbertv2.0",
        "triples": "\/future\/u\/okhattab\/root\/unit\/experiments\/2021.10\/downstream.distillation.round2.2_score\/round2.nway6.cosine.ib\/examples.64.json",
        "collection": [
            "A Unified System for Aggression Identification in English Code-Mixed and Uni-Lingual Texts Anant Khandelwal anant.iitd.2085@gmail.com M.Tech., IIT Delhi Bangalore, India Niraj Kumar nirajrkumar@gmail.com Conduent Labs, PhD, IIIT-Hyderabad Bangalore, India ABSTRACT Wide usage of social media platforms has increased the risk of aggression, which results in mental stress and affects the lives of people negatively like psychological agony, fighting behavior, and disrespect to others. Majority of such conversations contains code- mixed languages[28]. Additionally, the way used to express thought or communication style also changes from one social media plat- form to another platform (e.g., communication styles are different in twitter and Facebook). These all have increased the complexity of the problem. To solve these problems, we have introduced a unified and robust multi-modal deep learning architecture which works for English code-mixed dataset and uni-lingual English dataset both. The devised system, uses psycho-linguistic features and very ba- sic linguistic features.",
            "To solve these problems, we have introduced a unified and robust multi-modal deep learning architecture which works for English code-mixed dataset and uni-lingual English dataset both. The devised system, uses psycho-linguistic features and very ba- sic linguistic features. Our multi-modal deep learning architecture contains, Deep Pyramid CNN, Pooled BiLSTM, and Disconnected RNN(with Glove and FastText embedding, both). Finally, the system takes the decision based on model averaging. We evaluated our system on English Code-Mixed TRAC1 2018 dataset and uni-lingual English dataset obtained from Kaggle2. Experimental results show that our proposed system outperforms all the previous approaches on English code-mixed dataset and uni-lingual English dataset. KEYWORDS English code-mixed Text, Deep Pyramid CNN, Disconnected RNN, Pooled BiLSTM, Model Averaging ACM Reference Format: Anant Khandelwal and Niraj Kumar. 2020. A Unified System for Aggression Identification in English Code-Mixed and Uni-Lingual Texts.",
            "2020. A Unified System for Aggression Identification in English Code-Mixed and Uni-Lingual Texts. In 7th ACM IKDD CoDS and 25th COMAD (CoDS COMAD 2020), January 5\u20137, 2020, Hyderabad, India. ACM, Hyderabad, India, 10 pages. https:\/\/doi.org\/10.1145\/ 3371158.3371165 1 INTRODUCTION The exponential increase of interactions on the various social me- dia platforms has generated the huge amount of data on social media platforms like Facebook and Twitter, etc. These interactions 1https:\/\/sites.google.com\/view\/trac1\/home 2https:\/\/www.kaggle.com\/dataturks\/dataset-for-detection-of-cybertrolls Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted.",
            "Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and\/or a fee. Request permissions from permissions@acm.org. CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India \u00a9 2020 Association for Computing Machinery. ACM ISBN 978-1-4503-7738-6\/20\/01...$15.00 https:\/\/doi.org\/10.1145\/3371158.3371165 resulted not only positive effect but also negative effect over bil- lions of people owing to the fact that there are lots of aggressive comments (like hate, anger, and bullying). These cause not only mental and psychological stress but also account deactivation and even suicide[13]. In this paper we concentrate on problems related to aggressiveness. The fine-grained definition of the aggressiveness\/aggression identi- fication is provided by the organizers of TRAC-2018 [25, 28].",
            "In this paper we concentrate on problems related to aggressiveness. The fine-grained definition of the aggressiveness\/aggression identi- fication is provided by the organizers of TRAC-2018 [25, 28]. They have classified the aggressiveness into three labels (Overtly ag- gressive(OAG), Covertly aggressive(CAG), Non-aggressive(NAG)). The detailed description for each of the three labels is described as follows: (1) Overtly Aggressive(OAG) - This type of aggression shows direct verbal attack pointing to the particular individual or group. For example, \"Well said sonu..you have courage to stand against dadagiri of Muslims\". (2) Covertly Aggressive(CAG) - This type of aggression the attack is not direct but hidden, subtle and more indirect while being stated politely most of the times. For example, \"Dear India, stop playing with the emotions of your people for votes.\" (3) Non-Aggressive(NAG) - Generally these type of text lack any kind of aggression it is basically used to state facts, wishing on occasions and polite and supportive.",
            "For example, \"Dear India, stop playing with the emotions of your people for votes.\" (3) Non-Aggressive(NAG) - Generally these type of text lack any kind of aggression it is basically used to state facts, wishing on occasions and polite and supportive. The additional discussion on aggressiveness task can be found in Kaggle task 3, which just divided the task into two classes - i.e., presence or absence of aggression in tweets. The informal setting\/environment of social media often encourage multilingual speakers to switch back and forth between languages when speaking or writing. These all resulted in \u201ccode-mixing\u201d and \u201ccode-switching\u201d. Code-mixing refers to the use of linguistic units from different languages in a single utterance or sentence, whereas code-switching refers to the co-occurrence of speech extracts be- longing to two different grammatical systems[9]. This language interchange makes the grammar more complex and thus it becomes tough to handle it by traditional algorithms. Thus the presence of high percentage of code-mixed content in social media text has increased the complexity of the aggression detection task.",
            "This language interchange makes the grammar more complex and thus it becomes tough to handle it by traditional algorithms. Thus the presence of high percentage of code-mixed content in social media text has increased the complexity of the aggression detection task. For exam- ple, the dataset provided by the organizers of TRAC-2018 [25, 28] is actually a code-mixed dataset. The massive increase of the social media data rendered the man- ual methods of content moderation difficult and costly. Machine Learning and Deep Learning methods to identify such phenomena have attracted more attention to the research community in recent years[26]. Based on the current context, we can divide the problem into three 3https:\/\/www.kaggle.com\/dataturks\/dataset-for-detection-of-cybertrolls arXiv:2001.05493v2  [cs.CL]  18 Jan 2020",
            "CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Anant Khandelwal and Niraj Kumar sub-problems: (a) detection of aggression levels, (b) handling code- mixed data and (c) handling styles (due to differences in social media platforms and text entry rules\/restrictions). A lot of the previous approaches[27] have used an ensemble model for the task. For example, some of them uses ensemble of statistical models[2, 6, 34, 42] some used ensemble of statistical and deep learning models[40, 41, 48] some used ensemble of deep learning models [29]. There are approaches which proposed unified architec- ture based on deep learning[1, 7, 8, 32, 33, 39] while some proposed unified statistical model[6]. Additionally, there are some approaches uses data augmentation either through translation or labeling ex- ternal data to make the model generalize across domains[1, 6, 41].",
            "Additionally, there are some approaches uses data augmentation either through translation or labeling ex- ternal data to make the model generalize across domains[1, 6, 41]. Most of the above-discussed systems either shows high perfor- mance on (a) Twitter dataset or (b) Facebook dataset (given in the TRAC-2018), but not on both English code-mixed datasets. This may be due to the text style or level of complexities of both datasets. So, we concentrated to develop a robust system for English code-mixed texts, and uni-lingual texts, which can also handle different writing styles. Our approach is based on three main ideas: \u2022 Deep-Text Learning. The goal is to learn long range as- sociations, dependencies between regions of text, N-grams, key-patterns, topical information, and sequential dependen- cies. \u2022 Exploiting psycho-linguistic features with basic linguis- tic features as meta-data. The main aim is to minimize the direct dependencies on in-depth grammatical structure of the language (i.e., to support code-mixed data). We have also included emoticons, and punctuation features with it.",
            "The main aim is to minimize the direct dependencies on in-depth grammatical structure of the language (i.e., to support code-mixed data). We have also included emoticons, and punctuation features with it. We use the term \"NLP Features\" to represent it in the entire paper. \u2022 Dual embedding based on FastText and Glove. This dual embedding helps in high vocabulary coverage and to capture the rare and partially incorrect words in the text (specially by FastText [31]). Our \"Deep-text architecture\" uses model averaging strategy with three different deep learning architectures. Model averaging be- longs to the family of ensemble learning techniques that uses mul- tiple models for the same problem and combines their predictions to produce a more reliable and consistent prediction accuracy [22]. This is the simplest form of weighted average ensemble based prediction[35] where, each ensemble member contribute equally to predictions. Specifically in our case, three different models have been used. The following contains the intuition behind the selection of these three models: (1) Deep Pyramid CNN [21] being deeper helps to learn long range associations between temporal regions of text using two-view embeddings.",
            "Specifically in our case, three different models have been used. The following contains the intuition behind the selection of these three models: (1) Deep Pyramid CNN [21] being deeper helps to learn long range associations between temporal regions of text using two-view embeddings. (2) Disconnected RNN [50] is very helpful in encoding the sequential information with temporal key patterns in the text. (3) Pooled BiLSTM In this architecture the last hidden state of BiLSTM is concatenated with mean and max-pooled repre- sentation of the hidden states obtained over all the time steps of Bi-LSTM. The idea of using mean and max pooling layers together is taken from [15] to avoid the loss of information in longer sequences of texts and max-pooling is taken to capture the topical information[44]. (4) NLP Features In each of the individual models, the NLP features are concatenated with last hidden state before the softmax classification layer as meta-data. The main aim is to provide additional information to the deep learning network. The intuition behind the NLP features are the following: \u2022 Emotion Sensor Dataset We have introduced to use of emotion sensor features, as a meta-data information.",
            "The main aim is to provide additional information to the deep learning network. The intuition behind the NLP features are the following: \u2022 Emotion Sensor Dataset We have introduced to use of emotion sensor features, as a meta-data information. We have obtained the word sensor dataset from Kaggle4. In this dataset each word is statistically classified into 7 distinct classes (Disgust, Surprise, Neutral, Anger, Sad, Happy and Fear) using Naive Bayes, based on sentences collected from twitter and blogs. \u2022 Controlled Topical Signals from Empath5. Empath can analyse the text across 200 gold standard topics and emo- tions. Additionally, it uses neural embedding to draw conno- tation among words across more than 1.8 billion words. We have used only selected categories like violence, hate, anger, aggression, social media and dispute from 200 Empath cate- gories useful for us unlike[40] which takes 194 categories. \u2022 Emoticons frequently used on social media indicates the sense of sentence[7, 34, 39].",
            "\u2022 Emoticons frequently used on social media indicates the sense of sentence[7, 34, 39]. \u2022 Normalized frequency of POS tags According to [6, 8, 40, 48] POS Tags provide the degree of target aggressiveness. Like[40], we have used only four tags (a) adjective (JJ, JJR, JJS), (b) adverb (RB, RBR, RBS), (c) verb (VB, VBD, VBG, VBN, VBP, VBZ) and (d) noun (NN, NNS, NNP, NNPS) (See \u201cPenn- Treebank POS Tags\u201d6 for abbreviations and the full list). The main reason behind the selection of these four tags is to just identify words related to persons, activities, quality, etc, in the text. \u2022 Sentiment polarity obtained from VADER Sentiment Anal- ysis [16] (positive, negative and neutral) like used in [6, 8, 41, 48]. It helps to demarcate aggressiveness with non- aggressiveness in the text. The block diagram of the proposed system is shown in Figure 1.",
            "It helps to demarcate aggressiveness with non- aggressiveness in the text. The block diagram of the proposed system is shown in Figure 1. The proposed system does not use any data augmentation techniques like [1], which is the top performer in TRAC (in English code- mixed Facebook data). This means the performance achieved by our system totally depends on the training dataset provided by TRAC. This also proves the effectiveness of our approach. Our system outperforms all the previous state of the art approaches used for aggression identification on English code-mixed TRAC data, while being trained only from Facebook comments the system outperforms other approaches on the additional Twitter test set. The remaining part of this paper is organized as follows: Section 2 is an overview of related work. Section 3 presents the methodology and algorithmic details. Section 4 discusses the experimental evaluation of the system, and Section 5 concludes this paper. 2 RELATED WORK There are several works for aggression identification submitted at TRAC 2018 among them some approaches use the ensemble of multiple statistical models[2, 6, 34, 42].",
            "Section 4 discusses the experimental evaluation of the system, and Section 5 concludes this paper. 2 RELATED WORK There are several works for aggression identification submitted at TRAC 2018 among them some approaches use the ensemble of multiple statistical models[2, 6, 34, 42]. Similarly, some of the 4https:\/\/www.kaggle.com\/iwilldoit\/emotions-sensor-data-set 5http:\/\/empath.stanford.edu\/ 6https:\/\/www.ling.upenn.edu\/courses\/Fall_2003\/ling001\/penn_treebank_pos.html",
            "A Unified System for Aggression Identification in English Code-Mixed and Uni-Lingual Texts CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Input Text Data Preprocessing Tokenization and converting words to indices Pretrained Embeddings Pooled Bi-LSTM Model Averaging Disconnected RNN Deep Pyramid CNN NLP Features #Emotion Sensor, #POS, #emoji etc  OAG NAG CAG Figure 1: Block diagram of the proposed system models like[40, 41, 48] have used ensemble of statistical and deep learning models. In these models the statistical part of the model uses additional features from text analysis like parts-of-speech tags, punctuation, emotion, emoticon etc. Model like: [29] has used the ensemble of deep learning models based on majority voting. Some other models like: [30, 34, 40] have used different models for Facebook and twitter. While approaches like:[1, 7, 8, 32, 33, 39] have proposed unified architecture based on deep learning.",
            "Some other models like: [30, 34, 40] have used different models for Facebook and twitter. While approaches like:[1, 7, 8, 32, 33, 39] have proposed unified architecture based on deep learning. Systems like[1, 6, 41] have used data augmentation either through transla- tion or labelling external data to make the model generalize across domains. While [6] has proposed a unified statistical model. Among approaches like[2] extracted features from TF-IDF of char- acter n-grams while[30] uses LSTM with pre-trained embeddings from FastText. [8] have used the BiLSTM based model and the SVM metaclassifier model for the Facebook and Twitter test sets, respec- tively. While [29] tried ensembling of CNN, LSTM, and BILSTM. Some approaches like:[40] has used emotions frequency as one of the features, while some others use sentiment emotion as feature[48]. Also,[7, 39] have converted emoticons to their description. [34] have used TF-IDF of emoticons per-class as one of the features.",
            "Some approaches like:[40] has used emotions frequency as one of the features, while some others use sentiment emotion as feature[48]. Also,[7, 39] have converted emoticons to their description. [34] have used TF-IDF of emoticons per-class as one of the features. Compared to all these approaches, we have concentrated to capture multiple linguistic\/pattern based relations, key-terms and key-patters (with their association in text) through a combination of deep learning ar- chitectures with model averaging. We have also used NLP features as additional features with our deep learning architecture, obtained from psycho-linguistic and basic linguistic features. 3 METHODOLOGY In this section, we describe our system architecture for aggres- siveness classifier. In section 3.1 we describe data preprocessing applied on the input text before feeding it to each of the classifica- tion models. Section 3.2 describes the computation of NLP features. In Sections 3.3, 3.4 and 3.5 we have described the architecture of different deep learning models like Deep Pyramid CNN, Discon- nected RNN and Pooled BiLSTM respectively.",
            "Section 3.2 describes the computation of NLP features. In Sections 3.3, 3.4 and 3.5 we have described the architecture of different deep learning models like Deep Pyramid CNN, Discon- nected RNN and Pooled BiLSTM respectively. Finally, in Section 3.6, we describe model averaging based classification model which combines the prediction probabilities from three deep learninig architectures discussed above. (see Figure 1. for block diagram of system architecture). 3.1 Data Preprocessing We consider the text to be well formatted before applying the text to the embedding layer. First, we detect non-English text(which are few) and translate all of them to English using Google Translate7. Still, there is some code mixed words like \"mc\", \"bc\" and other Eng- lish abbreviations and spelling errors like \"nd\" in place of \"and\", \"u\" in place of \"you\" causes deep learning model to confuse with sentences of the same meaning. We follow the strategy of prepro- cessor as in[39] to normalize the abbreviations and remove spelling errors, URLs and punctuation marks, converting emojis to their description.",
            "We follow the strategy of prepro- cessor as in[39] to normalize the abbreviations and remove spelling errors, URLs and punctuation marks, converting emojis to their description. 3.2 NLP Features We have identified a novel combination of features which are highly effective in aggression classification when applied in addition to the features obtained from the deep learning classifier at the clas- sification layer. We have introduced two new features in addition to the previously available features. The first one is the Emotion Sensor Feature9 which use a statistical model to classify the words into 7 different classes based on the sentences obtained from twitter and blogs which contain total 1,185,540 words. The second one is the collection of selected topical signal from text collected using Empath10 (see Table 1.). Different from previous approaches[40, 42] where [40] have used Emotion features in the form of frequency while [42] have used emotion feature vector obtained from LIWC 2007[37]. Unlike[40] we have used only 6 topical signals from Emapth[5]. We have bor- rowed the idea of using other features like punctuation features and parts-of-speech tags from [40].",
            "Unlike[40] we have used only 6 topical signals from Emapth[5]. We have bor- rowed the idea of using other features like punctuation features and parts-of-speech tags from [40]. The Table 1. lists and describes 7https:\/\/pypi.org\/project\/googletrans\/ 8https:\/\/spacy.io\/usage\/linguistic-features#pos-tagging 9https:\/\/www.kaggle.com\/iwilldoit\/emotions-sensor-data-set 10http:\/\/empath.stanford.edu\/",
            "CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Anant Khandelwal and Niraj Kumar Feature Name Description Feature Count Emotion Sensor Feature Emotion Sensor Features are developed by classifying the words statistically using Naive Bayes algorithm into 7 different categories (Disgust, Surprise, Neutral, Anger, Sad, Happy and Fear) using sentences collected from twitter or blogs. 7 Parts-of-Speech(POS) Like[40] we have used the normalized frequencies of noun, adjective, verb, and adverb which serve as a rich feature for exaggerating type of aggressiveness in the text. We used the Spacy8 POS tagger. 4 Punctuation Like in \u201cCommunist parties killed lacks of opponents in WB in 35 years ruling????? ?\u201d the presence of multiple question marks linked with the aggressiveness content in the text. Similarly \"!\" also has the same effect. We have used the count of \u201c!\u201d & \u201c?\u201d in the text as a feature. 1 Sentiment analysis The percentage of positive, negative, and neutral can indicate the amount of aggressiveness in the text.",
            "Similarly \"!\" also has the same effect. We have used the count of \u201c!\u201d & \u201c?\u201d in the text as a feature. 1 Sentiment analysis The percentage of positive, negative, and neutral can indicate the amount of aggressiveness in the text. We have used VADER Sentiment Analysis[16] to extract the weight for positive, negative & neutral class. 3 Topic Signals from text We have used open source library Empath[2] introduced in [5] which has categories highly correlated to LIWC[37]. Although it has a rich number of categories we particularly identified selected categories useful for our case these are aggressiveness, violence, hate, anger, dispute & social_media. We have used the normalized weight of each of these categories as separate features. 6 TF-IDF Emoticon Feature Since emoticons are widely used to convey the meaning on social media platform analyzing the data emoticons are an important feature for classifying aggressive behavior and tf-idf feature for each class is calculated as in [34] 3 Total Features 24 Table 1: Details of NLP features features, tools used to obtain them and the number of features resulted from each type.",
            "3.3 Deep Pyramid CNN(DPCNN) Since it has been proved that CNNs are great feature extractors for text classification[18\u201321, 23, 52] while deeper networks(whether RNNs or CNN\u2019s) has been proven for learning long-range associ- ation like deeper character level CNN\u2019s[4, 54], and complex com- bination of RNN and CNN[17, 36, 43, 51, 53]. Deep Pyramid CNN (DPCNN)[21] has 15 layers of word-level CNN\u2019s and contains sim- ilar pre-activation as proposed in improved Resnet[12]. DPCNN outperforms the 32-layer character CNN[4] and Hierarchical atten- tion networks[51] it has added advantage that due to its pyramid structure it does not require dimension matching in shortcut con- nections defined as z + h(z) as in[12] where h(z) represents the skipped layers essentially contains two convolutional layers with pre-activation. It uses enhanced region embedding which consumes pre-trained embeddings (in our case it is FastText+Glove based dual embedding). Enhanced Region Embedding.",
            "It uses enhanced region embedding which consumes pre-trained embeddings (in our case it is FastText+Glove based dual embedding). Enhanced Region Embedding. The current DPCNN[21], uses two view type enhanced region embedding. For the text categoriza- tion, it defines a region of text as view-1 and its adjacent regions as view-2. Then using unlabeled data, it trains a neural network of one hidden layer with an artificial task of predicting view-2 from view-1. The obtained hidden layer, which is an embedding function that takes view-1 as input, serves as an unsupervised embedding function in the model for text categorization. The detailed architec- ture has been shown in Figure 2. Let each word input xj \u2208Rd be the d-dimensional vector for the jth word wj and the sentence si contains sequence of n words {w1,w2,w3, ......,wn} as shown in Figure 2.",
            "Let each word input xj \u2208Rd be the d-dimensional vector for the jth word wj and the sentence si contains sequence of n words {w1,w2,w3, ......,wn} as shown in Figure 2. In comparision to con- ventional convolution layer, DPCNN proposes to use pre-activation, thus essentially the convolutional layer of DPCNN is W\u03c3(x) + b, where W and b(unique to each layer) are the weights matrix and bias respectively, we use \u03c3 as PReLU[10]. During implementation we use kernel size of 3(represented by x to denote the small overlap- ping regions of text.), The number of filters(number of feature maps denoted by the number of rows of W) is 128 as depicted in Figure 2. With the number of filters same in each convolution layer and max-pooling with stride 2 makes the computation time halved, and doubles the net coverage of convolution kernel. Thus the deeper layers cause to learn long-range associations between regions of text.",
            "With the number of filters same in each convolution layer and max-pooling with stride 2 makes the computation time halved, and doubles the net coverage of convolution kernel. Thus the deeper layers cause to learn long-range associations between regions of text. Let\u2019s say hdpcnn \u2208Rp1 be the hidden state obtained from DPCNN just before the classification layer and fnlp \u2208R24 be the NLP features computed from the text. Lets z1 \u2208Rp1+24 be another hidden state obtained as z1 = hdpcnn \u2295fnlp (1) where, \u2295denotes concatenation. The vector z1 obtained, then fed to the fully connected layer with softmax activation. Let y\u2217 i1 be the softmax probabilities, specifically for class label k is given as: y\u2217 i1,k = p(yi = k|si) = sof tmax(W T dpcnnz1+bdpcnn)[k] \u2200k \u2208[1...K] (2) where K is the number of classes,Wdpcnn andbdpcnn are the weight matrix and bias respectively.",
            "3.4 Disconnected RNN(DRNN) Given a sequence si = [x1,x2,x3, ....xn] where xj \u2208Rd represents the d-dimensional word vector for word wj and n is the length of input text applied to a variant of RNN called Long Short-Term Memory (LSTM)[14] as shown in Figure 3. It is widely used for",
            "A Unified System for Aggression Identification in English Code-Mixed and Uni-Lingual Texts CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Region Embeddings 3, conv, 128 3, conv, 128 \"Hi anuj and Sonia pls share ur view on aviation sector.\" Unsupervised Embeddings + conv uses pre-activation : W\u03c3(x) + b Pooling \/2 3, conv, 128 3, conv, 128 + Pooling Fully Connected Layer NLP Features Repeat x6 Figure 2: DPCNN LSTM LSTM LSTM LSTM LSTM LSTM LSTM LSTM LSTM w1 <PAD> <PAD> w2 wn\u22128 wn\u22127 wn h1 h2 hn Max Pooling NLP Features Fully Connected Layer Embedding Lookup + Figure 3: DRNN sequential modelling with long-term dependencies. For sequence modelling it keeps on updating the memory cell with current input using an adaptive gating mechanism.",
            "For sequence modelling it keeps on updating the memory cell with current input using an adaptive gating mechanism. At time step t the memory ct and the hidden state ht are updated as follows: \uf8ee\uf8ef\uf8ef\uf8ef\uf8ef\uf8ef\uf8ef\uf8f0 it ft ot \u02c6ct \uf8f9\uf8fa\uf8fa\uf8fa\uf8fa\uf8fa\uf8fa\uf8fb = \uf8ee\uf8ef\uf8ef\uf8ef\uf8ef\uf8ef\uf8ef\uf8f0 \u03c3 \u03c3 \u03c3 tanh \uf8f9\uf8fa\uf8fa\uf8fa\uf8fa\uf8fa\uf8fa\uf8fb = W .[ht\u22121,xt ] (3) ct = ft \u2299ct\u22121 + it \u2299\u02c6ct (4) where \u02c6ct is the current cell state obtained from current input xt and previous hidden state ht\u22121, it , ft and ot are the activation cor- responding to input gate, forget gate and output gate respectively, \u03c3 denotes the logistic sigmoid function and \u2299denotes the element- wise multiplication.",
            "Hence the hidden state representation at time step t depends on all the previous input vectors given as ht = LSTM(xt, ....,x2,x1) \u2200t \u2208[1...n] (5) Specifically we have used Bi-directional LSTM [14] to capture both past and future context. It provides ht from both directions(forward & backward). The forward LSTM takes the natural order of words from x1 to xn to obtain \u2212\u2192 ht , while backward-LSTM xn to x1 to obtain \u2190\u2212 ht . then ht is calculated as ht = \u2212\u2192 ht \u2295\u2190\u2212 ht \u2208R2L (6) where \u2295is the concatenation and L is the size for one-directional LSTM. Therefore we denote the hidden state in equation 5 with BiLSTM as ht = BiLSTM(xt, , ......x2,x1) \u2208R2L \u2200t \u2208[1..n] (7) To avoid handling of long sequence and to capture local information for each word we define the window size k for each word such that the BiLSTM only sees the the previous k \u22121 words with the current word, where k is a hyperparameter[50].",
            "We use padding <PAD> to make the slices of fixed size k(as shown in Figure 3). It provides each hidden state ht with sequence of k previous words. Since the phrase of k words can lie anywhere in the text it helps to model the position invariant phrase representation due to which the it identifies key phrases important for identifying particular category. In this case, the equation of ht is given as ht = BiLSTM(xt,xt\u22121,xt\u22122, ......,xt\u2212k+1) (8) The output hidden vectors, H = [h1,h2,h3, ......hn] \u2208Rn\u00d72L are converted to fixed-length vector hdrnn \u2208R2L with max pooling over time: hl drnn = max t hl t,t \u2208[1, ...n], \u2200l \u2208[1, .....2L] (9) Let\u2019s say fnlp \u2208R24 be the NLP features computed from the text. Let\u2019s z2 \u2208R2L+24 be another hidden state obtained as z2 = hdrnn \u2295fnlp (10) where \u2295denotes concatenation. The vector z2 obtained, then fed to the fully connected layer with softmax activation.",
            "Let\u2019s z2 \u2208R2L+24 be another hidden state obtained as z2 = hdrnn \u2295fnlp (10) where \u2295denotes concatenation. The vector z2 obtained, then fed to the fully connected layer with softmax activation. Let y\u2217 i2 be the softmax probabilities, specifically for class label k is given as: y\u2217 i2,k = p(yi = k|si) = sof tmax(W T drnnz2 + bdrnn)[k] \u2200k \u2208[1...K] (11) where K is the number of classes, Wdrnn is the weight matrix, and bdrnn is the bias. 3.5 Pooled BiLSTM The architecture has been shown in Figure 4. Given a sequence si = [x1,x2,x3, .....xj], where xj \u2208Rd is the d-dimensional word vector for word wj, the hidden state obtained after BiLSTM is given as ht = BiLSTM(xt,xt\u22121, ....x1)\u2200t \u2208[1...n] (12)",
            "CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Anant Khandelwal and Niraj Kumar w1 w2 wn LSTM LSTM LSTM Average Pool Max Pool NLP Features Fully Connected Layer Last Hidden  State Embedding Lookup + + + Figure 4: Pooled BiLSTM To avoid the loss of information because of modelling the entire sequence, we have concatenated the max-pooled(cmax) and mean- pooled(cmean) representation of hidden states calculated over all time steps [15]. We have also concatenated the nlp features, fnlp \u2208 R24 the final feature vector z3 is given as z3 = hn \u2295cmax \u2295cmean \u2295fnlp (13) where \u2295denotes concatenation. The final feature z3 vector is fed to the fully connected layer with softmax activation.",
            "The final feature z3 vector is fed to the fully connected layer with softmax activation. Let y\u2217 i3 be the softmax probablities, specifically for class label k given as: y\u2217 i3,k = p(yi = k|si) = sof tmax(W T bilstmz3+bbilstm)[k] \u2200k \u2208[1...K] (14) where K is the number of classes and Wbilstm and bbilstm are the weight matrix and bias respectively. 3.6 Classification Model According to deep learning literature [11, 45, 46], unweighted av- eraging might be a reasonable ensemble for similar base learners of comparable performance. Now, similar to the information dis- cussed in [22], we can compute the model averaging (unweighted) by combining the softmax probabilities of three different classifica- tion models obtained from equations 2, 11, 14.",
            "Now, similar to the information dis- cussed in [22], we can compute the model averaging (unweighted) by combining the softmax probabilities of three different classifica- tion models obtained from equations 2, 11, 14. The averaged class probabilities are computed as: y\u2217 i,k = y\u2217 i1,k + y\u2217 i2,k + y\u2217 i3,k 3 \u2200k \u2208[1....K] (15) \u02c6yi = arg max k (y\u2217 i ) (16) where K is the number of classes, and \u02c6yi is the predicted label for sentence si. 4 EXPERIMENT AND EVALUATION 4.1 Dataset Description We have used two datasets in our experimental evaluations: (1) TRAC 2018 Dataset11 and (2) Kaggle Dataset12. TRAC 2018 Dataset: We have used the English code-mixed dataset 11https:\/\/sites.google.com\/view\/trac1\/shared-task 12https:\/\/www.kaggle.com\/dataturks\/dataset-for-detection-of-cybertrolls provided by TRAC 2018.",
            "TRAC 2018 Dataset: We have used the English code-mixed dataset 11https:\/\/sites.google.com\/view\/trac1\/shared-task 12https:\/\/www.kaggle.com\/dataturks\/dataset-for-detection-of-cybertrolls provided by TRAC 2018. This dataset contains three labels, (a) Non- Aggressive(NAG), (b) Overtly-Aggressive (OAG) and (c) Covertly- Aggressive(CAG). The distribution of training, validation and test sets are described in Table 2. Kaggle Dataset: This dataset contains 20001 tweets which are man- ually labeled. The labels are divided into two categories (indicating presence or absence of aggression in tweets) AGG(Aggressive) or NAG(Non-Aggressive). We have used the same test split available in the baseline code13. The distribution for each of the training and test is given in Table 3.",
            "We have used the same test split available in the baseline code13. The distribution for each of the training and test is given in Table 3. Number Training Validation Test Facebook Twitter Texts 11999 3001 916 1257 Overtly- aggressive 2708 711 144 361 Covertly aggressive 4240 1057 142 413 Non- aggressive 5051 1233 630 483 Table 2: TRAC 2018, Details of English Code-Mixed Dataset Number Training Test Texts 15000 5001 Aggressive(AGG) 5867 1955 Non-Aggressive(NAG) 9133 3046 Table 3: Kaggle, Uni-lingual(English) Dataset 4.2 Experimental Setup We have used Glove Embeddings[38] concatenated with FastText Embeddings[31] in all the three classification models presented in this paper. Specifically, we used Glove pre-trained vectors ob- tained from Twitter corpus containing 27 billion tokens and 1.2 million vocabulary entries where each word is represented using 100-dimensional vector.",
            "Specifically, we used Glove pre-trained vectors ob- tained from Twitter corpus containing 27 billion tokens and 1.2 million vocabulary entries where each word is represented using 100-dimensional vector. In the case of FastText the word is repre- sented using 300-dimensional vector. Also, we have applied spatial dropout[49] of 0.3 at embedding layer for DPCNN(in section 3.3) and Pooled BiLSTM(in section 3.5). For DPCNN model(in 3.3) we have learnt 128-dimensional vector representation for unsuper- vised embeddings implicitly for task specific representation as in [21]. Additionally, for DPCNN all the convolutional layers used 128 filters, kernel size of 3 and max-pooling stride 2. Additionally, in the case of DPCNN we have used kernel and bias regularizer of value 0.00001 for all convolutional kernels. The pre-activation function used in DPCNN is Parametric ReLU (PReLU) proposed in [10] while the activation at each of the convolutional kernel is linear.",
            "The pre-activation function used in DPCNN is Parametric ReLU (PReLU) proposed in [10] while the activation at each of the convolutional kernel is linear. For, DRNN(in section 3.4) we have used the window size of 8 and rest of the parameters related to LSTM units are same as given in[50]. For, Pooled BiLSTM(in section 3.5) we have used LSTM hidden units size as 256. The maximum sequence length is 200 in all three models. In each of the classification model the classification layer contains the fully connected layer with soft- max activation with output size of 3 equal to number of classes in case of TRAC 2018 dataset and its 2 in case of Kaggle dataset. 13https:\/\/www.kaggle.com\/alisaeidi92\/a-very-simple-nlp-model-0-75-accuracy",
            "A Unified System for Aggression Identification in English Code-Mixed and Uni-Lingual Texts CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Rank in Trac 2018 System F1 (Weighted) Facebook 1 saroyehun[1] 0.6425 2 EBSI-LIA-UNAM[2] 0.6315 3 DA-LD-Hildesheim[30] 0.6178 4 TakeLab[8] 0.6161 5 sreeIN[29] 0.6037 Our Models A DPCNN 0.6147 B DRNN 0.6228 C Pooled BiLSTM 0.6190 D DPCNN + NLP Features 0.6530 E DRNN + NLP Features 0.6201 F Pooled BiLSTM + NLP Features 0.6671 Model Averaging(A + B + C) 0.6298 Our proposed method Model Averaging(D + E + F) 0.",
            "6530 E DRNN + NLP Features 0.6201 F Pooled BiLSTM + NLP Features 0.6671 Model Averaging(A + B + C) 0.6298 Our proposed method Model Averaging(D + E + F) 0.6770 Table 4: Facebook Test results(TRAC 2018 Dataset) Rank in Trac 2018 System F1 (Weighted) Twitter 1 vista.ue[39] 0.6008 2 Julian[41] 0.5994 3 saroyehun[1] 0.5920 4 EBSI-LIA-UNAM[2] 0.5716 5 uOttawa[33] 0.5690 Our Models A DPCNN 0.5364 B DRNN 0.5272 C Pooled BiLSTM 0.5513 D DPCNN + NLP Features 0.5529 E DRNN + NLP Features 0.6189 F Pooled BiLSTM + NLP Features 0.6227 Model Averaging(A + B + C) 0.",
            "5513 D DPCNN + NLP Features 0.5529 E DRNN + NLP Features 0.6189 F Pooled BiLSTM + NLP Features 0.6227 Model Averaging(A + B + C) 0.5967 Our proposed method Model Averaging(D + E + F) 0.6480 Table 5: Twitter Test results(TRAC 2018 Dataset) S.No. System ACCURACY PRECISION (Weighted) RECALL (Weighted) F1 (Weighted) Baseline 0.7546 0.7660 0.7546 0.7380 A DPCNN 0.8478 0.8720 0.8478 0.8497 B DRNN 0.8620 0.8666 0.8620 0.8630 C Pooled BiLSTM 0.8646 0.8726 0.8646 0.8659 D DPCNN + NLP Features 0.7798 0.8372 0.7798 0.7812 E DRNN + NLP Features 0.8820 0.",
            "8646 0.8726 0.8646 0.8659 D DPCNN + NLP Features 0.7798 0.8372 0.7798 0.7812 E DRNN + NLP Features 0.8820 0.8885 0.8820 0.8830 F Pooled BiLSTM + NLP Features 0.8728 0.8855 0.8728 0.8742 Model Averaging(A + B + C)) 0.8666 0.8712 0.8666 0.8676 Our proposed Mehtod(Model Averaging(D + E + F)) 0.9016 0.9052 0.9016 0.9023 Table 6: Results on Kaggle Test Dataset Training has been done using ADAM optimizer[24] for DPCNN and RMSPROP[47] for DRNN and Pooled Bi-LSTM models. All the models are trained end-to-end using softmax cross entropy loss[3] for TRAC 2018 dataset and binary cross entropy loss[3] for Kaggle dataset.",
            "All the models are trained end-to-end using softmax cross entropy loss[3] for TRAC 2018 dataset and binary cross entropy loss[3] for Kaggle dataset. To train our model for TRAC 2018 dataset, we merged the training and validation dataset and then used 10% split from shuffled dataset to save the best model, for all classifiers. We have used only 20 NLP features (except TF-IDF Emoticon feature and Punctuation feature as given in Table 1) for Kaggle dataset (as these are not present in the Kaggle dataset). 4.3 Evaluation Strategy To compare our experimental results we have used top-5 systems from the published results of TRAC-2018[27]. To compare our re- sults on Kaggle dataset, we have used the last & the best published result on Kaggle website as a baseline. We have conducted the sep- arate experiments, to properly investigate the performance of (a) each of the classifiers (used in our model averaging based system), (b) impact of the NLP features on each of these classifiers and finally, (c) the performance of our proposed system.",
            "We have conducted the sep- arate experiments, to properly investigate the performance of (a) each of the classifiers (used in our model averaging based system), (b) impact of the NLP features on each of these classifiers and finally, (c) the performance of our proposed system. In Table 4, 5 and 6, models, named as DPCNN(ref 3.3), DRNN (ref 3.4) and Pooled BiLSTM(ref 3.5) are corresponding models without NLP features. Similarly, DPCNN+NLP Features, DRNN + NLP Features and Pooled BiLSTM + NLP Features are corresponding models with NLP features. The Model Averaging (A+B+C) is the ensemble of three models (i.e., model averaging of DPCNN, DRNN and Pooled BiLSTM) without NLP features. Finally, Our Proposed Method, which represents the model averaging of three models with NLP features. 4.4 Results and Discussion In this paper, we have evaluated our model using weighted macro- averaged F-score. The measure is defined as in (See [25, 27]).",
            "Finally, Our Proposed Method, which represents the model averaging of three models with NLP features. 4.4 Results and Discussion In this paper, we have evaluated our model using weighted macro- averaged F-score. The measure is defined as in (See [25, 27]). It weights the F-score computed per class based on the class compo- sition in the test set and then takes the average of these per-class F-score gives the final F-score. Table 4, 5 and 6. presents the com- parative experimental results for the proposed method in this paper with respect to the state-of-the-art. The top 5 models[27] given in Table 4 and 5. are the best performing models for Facebook",
            "CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Anant Khandelwal and Niraj Kumar OAG CAG NAG Predicted label OAG CAG NAG True label 91 19 34 29 43 70 73 76 481 50 100 150 200 250 300 350 400 450 (a) Confusion Matrix for Facebook Test Set(TRAC 2018) OAG CAG NAG Predicted label OAG CAG NAG True label 279 71 11 171 138 104 5 56 422 50 100 150 200 250 300 350 400 (b) Confusion Matrix for Twitter Test Set(TRAC 2018) NAG AGG Predicted label NAG AGG True label 2712 334 158 1797 300 600 900 1200 1500 1800 2100 2400 2700 (c) Confusion Matrix for Kaggle Test Set Figure 5: Confusion Matrix for Facebook, Twitter and Kaggle Datasets. and Twitter test dataset respectively on TRAC 2018.",
            "and Twitter test dataset respectively on TRAC 2018. We have fol- lowed all the experimental guidelines as discussed in TRAC contest guideline paper[25, 27]. From the results given in Table 4, 5 and 6 it is clear that our proposed model shows the best performance among all of the approaches. These results also state that all the deep learning architectures with NLP features, perform better than individual corresponding deep learning architectures. This means NLP features, adds some value to the architectures, even if it is not very high. 5 CONCLUSION AND FUTURE WORK In this paper, we have briefly described the approach we have taken to solve the aggressive identification on online social media texts which is very challenging since the dataset is noisy and code-mixed. We presented an ensemble of deep learning models which outper- form previous approaches by sufficient margin while having the ability to generalize across domains. In future, we will explore other methods to increase the understand- ing of deep learning models on group targeted text, although the categories are well defined we will look after if we further fine-tune the categories with more data.",
            "In future, we will explore other methods to increase the understand- ing of deep learning models on group targeted text, although the categories are well defined we will look after if we further fine-tune the categories with more data. In the future, we are planning to pay attention on a generalized language model for code-mixed texts which can also handle Hindi-code-mixed and other multi-lingual code-mixed datasets (i.e., trying to reduce the dependencies on language-specific code-mixed resources).",
            "A Unified System for Aggression Identification in English Code-Mixed and Uni-Lingual Texts CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India REFERENCES [1] Segun Taofeek Aroyehun and Alexander Gelbukh. 2018. Aggression detection in social media: Using deep neural networks, data augmentation, and pseudo label- ing. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 90\u201397. [2] Ignacio Arroyo-Fern\u00e1ndez, Dominic Forest, Juan-Manuel Torres-Moreno, Mauri- cio Carrasco-Ruiz, Thomas Legeleux, and Karen Joannette. 2018. Cyberbullying Detection Task: the EBSI-LIA-UNAM System (ELU) at COLING\u201818 TRAC-1. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC- 2018). 140\u2013149. [3] Fran\u00e7ois Chollet et al. 2018. Keras: The python deep learning library.",
            "In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC- 2018). 140\u2013149. [3] Fran\u00e7ois Chollet et al. 2018. Keras: The python deep learning library. Astrophysics Source Code Library (2018). [4] Alexis Conneau, Holger Schwenk, Lo\u0131c Barrault, and Yann Lecun. 2016. Very deep convolutional networks for natural language processing. arXiv preprint arXiv:1606.01781 2 (2016). [5] Ethan Fast, Binbin Chen, and Michael S Bernstein. 2016. Empath: Understanding topic signals in large-scale text. In Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems. ACM, 4647\u20134657. [6] Paula Fortuna, Jos\u00e9 Ferreira, Luiz Pires, Guilherme Routar, and S\u00e9rgio Nunes. 2018. Merging datasets for aggressive text identification. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018).",
            "2018. Merging datasets for aggressive text identification. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 128\u2013139. [7] Thiago Galery, Efstathios Charitos, and Ye Tian. 2018. Aggression identification and multi lingual word embeddings. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 74\u201379. [8] Viktor Golem, Mladen Karan, and Jan \u0160najder. 2018. Combining shallow and deep learning for aggressive text detection. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 188\u2013198. [9] John J Gumperz. 1982. Discourse strategies. Vol. 1. Cambridge University Press. [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2015. Delving deep into rectifiers: Surpassing human-level performance on imagenet classification.",
            "Discourse strategies. Vol. 1. Cambridge University Press. [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2015. Delving deep into rectifiers: Surpassing human-level performance on imagenet classification. In Proceedings of the IEEE international conference on computer vision. 1026\u20131034. [11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning for image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition. 770\u2013778. [12] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Identity mappings in deep residual networks. In European conference on computer vision. Springer, 630\u2013645. [13] Sameer Hinduja and Justin W Patchin. 2010. Bullying, cyberbullying, and suicide. Archives of suicide research 14, 3 (2010), 206\u2013221.",
            "Springer, 630\u2013645. [13] Sameer Hinduja and Justin W Patchin. 2010. Bullying, cyberbullying, and suicide. Archives of suicide research 14, 3 (2010), 206\u2013221. [14] Sepp Hochreiter and J\u00fcrgen Schmidhuber. 1997. Long short-term memory. Neural computation 9, 8 (1997), 1735\u20131780. [15] Jeremy Howard and Sebastian Ruder. 2018. Universal Language Model Fine- tuning for Text Classification. In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics, ACL 2018, Melbourne, Australia, July 15-20, 2018, Volume 1: Long Papers. 328\u2013339. https:\/\/doi.org\/10.18653\/v1\/P18-1031 [16] Clayton J Hutto and Eric Gilbert. 2014. Vader: A parsimonious rule-based model for sentiment analysis of social media text. In Eighth international AAAI conference on weblogs and social media.",
            "2014. Vader: A parsimonious rule-based model for sentiment analysis of social media text. In Eighth international AAAI conference on weblogs and social media. [17] Wenxiang Jiao, Haiqin Yang, Irwin King, and Michael R Lyu. 2019. HiGRU: Hierarchical Gated Recurrent Units for Utterance-level Emotion Recognition. arXiv preprint arXiv:1904.04446 (2019). [18] Rie Johnson and Tong Zhang. 2014. Effective use of word order for text cate- gorization with convolutional neural networks. arXiv preprint arXiv:1412.1058 (2014). [19] Rie Johnson and Tong Zhang. 2015. Semi-supervised convolutional neural net- works for text categorization via region embedding. In Advances in neural infor- mation processing systems. 919\u2013927. [20] Rie Johnson and Tong Zhang. 2016. Convolutional neural networks for text categorization: Shallow word-level vs. deep character-level.",
            "In Advances in neural infor- mation processing systems. 919\u2013927. [20] Rie Johnson and Tong Zhang. 2016. Convolutional neural networks for text categorization: Shallow word-level vs. deep character-level. arXiv preprint arXiv:1609.00718 (2016). [21] Rie Johnson and Tong Zhang. 2017. Deep pyramid convolutional neural networks for text categorization. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). 562\u2013570. [22] Cheng Ju, Aur\u00e9lien Bibaut, and Mark van der Laan. 2018. The relative perfor- mance of ensemble methods with deep convolutional neural networks for image classification. Journal of Applied Statistics 45, 15 (2018), 2800\u20132818. [23] Yoon Kim. 2014. Convolutional neural networks for sentence classification. arXiv preprint arXiv:1408.5882 (2014). [24] Diederik P Kingma and Jimmy Ba. 2014.",
            "[23] Yoon Kim. 2014. Convolutional neural networks for sentence classification. arXiv preprint arXiv:1408.5882 (2014). [24] Diederik P Kingma and Jimmy Ba. 2014. Adam: A method for stochastic opti- mization. arXiv preprint arXiv:1412.6980 (2014). [25] Ritesh Kumar, Guggilla Bhanodai, Rajendra Pamula, and Maheshwar Reddy Chen- nuru. 2018. Trac-1 shared task on aggression identification: Iit (ism)@ coling\u201818. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 58\u201365. [26] Ritesh Kumar, Atul Kr Ojha, Shervin Malmasi, and Marcos Zampieri. 2018. Bench- marking aggression identification in social media. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 1\u201311.",
            "2018. Bench- marking aggression identification in social media. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 1\u201311. [27] Ritesh Kumar, Atul Kr Ojha, Marcos Zampieri, and Shervin Malmasi. 2018. Pro- ceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). [28] Ritesh Kumar, Aishwarya N. Reganti, Akshit Bhatia, and Tushar Maheshwari. 2018. Aggression-annotated Corpus of Hindi-English Code-mixed Data. In Pro- ceedings of the Eleventh International Conference on Language Resources and Evaluation (LREC-2018). European Languages Resources Association (ELRA), Miyazaki, Japan.",
            "2018. Aggression-annotated Corpus of Hindi-English Code-mixed Data. In Pro- ceedings of the Eleventh International Conference on Language Resources and Evaluation (LREC-2018). European Languages Resources Association (ELRA), Miyazaki, Japan. https:\/\/www.aclweb.org\/anthology\/L18-1226 [29] Sreekanth Madisetty and Maunendra Sankar Desarkar. 2018. Aggression de- tection in social media using deep neural networks. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 120\u2013127. [30] Prasenjit Majumder, Thomas Mandl, et al. 2018. Filtering aggression from the multilingual social media feed. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 199\u2013207. [31] Tomas Mikolov, Edouard Grave, Piotr Bojanowski, Christian Puhrsch, and Ar- mand Joulin. 2018.",
            "199\u2013207. [31] Tomas Mikolov, Edouard Grave, Piotr Bojanowski, Christian Puhrsch, and Ar- mand Joulin. 2018. Advances in Pre-Training Distributed Word Representations. In Proceedings of the Eleventh International Conference on Language Resources and Evaluation (LREC-2018). [32] Nishant Nikhil, Ramit Pahwa, Mehul Kumar Nirala, and Rohan Khilnani. 2018. Lstms with attention for aggression detection. arXiv preprint arXiv:1807.06151 (2018). [33] Ahmed Husseini Orabi, Mahmoud Husseini Orabi, Qianjia Huang, Diana Inkpen, and David Van Bruwaene. 2018. Cyber-aggression detection using cross segment- and-concatenate multi-task learning from text. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 159\u2013165. [34] Constantin Orasan. 2018. Aggressive language identification using word embed- dings and sentiment features.",
            "In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 159\u2013165. [34] Constantin Orasan. 2018. Aggressive language identification using word embed- dings and sentiment features. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 113\u2013119. [35] Maciej Pawlikowski and Agata Chorowska. 2019. Weighted ensemble of statistical models. International Journal of Forecasting (2019). [36] Hao Peng, Jianxin Li, Qiran Gong, Senzhang Wang, Lifang He, Bo Li, Lihong Wang, and Philip S Yu. 2019. Hierarchical Taxonomy-Aware and Attentional Graph Capsule RCNNs for Large-Scale Multi-Label Text Classification. arXiv preprint arXiv:1906.04898 (2019). [37] James W Pennebaker, Roger J Booth, and Martha E Francis. 2007. Linguistic inquiry and word count: LIWC [Computer software].",
            "arXiv preprint arXiv:1906.04898 (2019). [37] James W Pennebaker, Roger J Booth, and Martha E Francis. 2007. Linguistic inquiry and word count: LIWC [Computer software]. Austin, TX: liwc. net 135 (2007). [38] Jeffrey Pennington, Richard Socher, and Christopher Manning. 2014. Glove: Global vectors for word representation. In Proceedings of the 2014 conference on empirical methods in natural language processing (EMNLP). 1532\u20131543. [39] Kashyap Raiyani, Teresa Gon\u00e7alves, Paulo Quaresma, and V\u00edtor Nogueira. 2018. Fully connected neural network with advance preprocessor to identify aggression over facebook and twitter. (2018). [40] Faneva Ramiandrisoa and Josiane Mothe. 2018. Irit at trac 2018. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 19\u201327.",
            "[40] Faneva Ramiandrisoa and Josiane Mothe. 2018. Irit at trac 2018. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 19\u201327. [41] Julian Risch and Ralf Krestel. 2018. Aggression identification using deep learning and data augmentation. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 150\u2013158. [42] Niloofar Safi Samghabadi, Deepthi Mave, Sudipta Kar, and Thamar Solorio. 2018. RiTUAL-UH at TRAC 2018 shared task: Aggression identification. arXiv preprint arXiv:1807.11712 (2018). [43] Dinghan Shen, Asli Celikyilmaz, Yizhe Zhang, Liqun Chen, Xin Wang, Jianfeng Gao, and Lawrence Carin. 2019. Towards Generating Long and Coherent Text with Multi-Level Latent Variable Models.",
            "[43] Dinghan Shen, Asli Celikyilmaz, Yizhe Zhang, Liqun Chen, Xin Wang, Jianfeng Gao, and Lawrence Carin. 2019. Towards Generating Long and Coherent Text with Multi-Level Latent Variable Models. arXiv preprint arXiv:1902.00154 (2019). [44] Yelong Shen, Xiaodong He, Jianfeng Gao, Li Deng, and Gr\u00e9goire Mesnil. 2014. A latent semantic model with convolutional-pooling structure for information retrieval. In Proceedings of the 23rd ACM international conference on conference on information and knowledge management. ACM, 101\u2013110. [45] Karen Simonyan and Andrew Zisserman. 2014. Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556 (2014). [46] Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich.",
            "[46] Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. 2015. Going deeper with convolutions. In Proceedings of the IEEE conference on computer vision and pattern recognition. 1\u20139. [47] Tijmen Tieleman and Geoffrey Hinton. 2012. Lecture 6.5\u00e2\u0102\u0164RmsProp: Divide the gradient by a running average of its recent magnitude. COURSERA: Neural Networks for Machine Learning, 2012. Technical Report. TRITA-MAT-E 2017: 81 ISRN-KTH\/MAT\/E\u201317\/81\u2013SE. [48] Antonela Tommasel, Juan Manuel Rodriguez, and Daniela Godoy. 2018. Textual aggression detection through deep learning. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 177\u2013187.",
            "[48] Antonela Tommasel, Juan Manuel Rodriguez, and Daniela Godoy. 2018. Textual aggression detection through deep learning. In Proceedings of the First Workshop on Trolling, Aggression and Cyberbullying (TRAC-2018). 177\u2013187. [49] Jonathan Tompson, Ross Goroshin, Arjun Jain, Yann LeCun, and Christoph Bregler. 2015. Efficient object localization using convolutional networks. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 648\u2013656.",
            "CoDS COMAD 2020, January 5\u20137, 2020, Hyderabad, India Anant Khandelwal and Niraj Kumar [50] Baoxin Wang. 2018. Disconnected Recurrent Neural Networks for Text Cat- egorization. In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). 2311\u20132320. [51] Zichao Yang, Diyi Yang, Chris Dyer, Xiaodong He, Alex Smola, and Eduard Hovy. 2016. Hierarchical attention networks for document classification. In Proceedings of the 2016 conference of the North American chapter of the association for computational linguistics: human language technologies. 1480\u20131489. [52] Wenpeng Yin, Katharina Kann, Mo Yu, and Hinrich Sch\u00fctze. 2017. Compara- tive study of CNN and RNN for natural language processing. arXiv preprint arXiv:1702.01923 (2017).",
            "[52] Wenpeng Yin, Katharina Kann, Mo Yu, and Hinrich Sch\u00fctze. 2017. Compara- tive study of CNN and RNN for natural language processing. arXiv preprint arXiv:1702.01923 (2017). [53] Licheng Yu, Zhe Lin, Xiaohui Shen, Jimei Yang, Xin Lu, Mohit Bansal, and Tamara L Berg. 2018. Mattnet: Modular attention network for referring ex- pression comprehension. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 1307\u20131315. [54] Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015. Character-level convolutional networks for text classification. In Advances in neural information processing systems. 649\u2013657."
        ],
        "queries": "\/future\/u\/okhattab\/data\/MSMARCO\/queries.train.tsv",
        "index_name": "PaperTab-question-2001.05493.pdf",
        "overwrite": false,
        "root": ".ragatouille\/",
        "experiment": "colbert",
        "index_root": null,
        "name": "2025-05\/17\/10.22.50",
        "rank": 0,
        "nranks": 1,
        "amp": true,
        "gpus": 1,
        "avoid_fork_if_possible": false
    },
    "num_chunks": 1,
    "num_partitions": 1024,
    "num_embeddings_est": 12238.000076293945,
    "avg_doclen_est": 177.36231994628906
}
